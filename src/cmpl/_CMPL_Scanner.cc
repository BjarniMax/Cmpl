#line 2 "src/cmpl/_CMPL_Scanner.cc"

#line 4 "src/cmpl/_CMPL_Scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cmplrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE cmpllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cmplrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void cmplrestart (FILE *input_file ,yyscan_t yyscanner );
void cmpl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE cmpl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void cmpl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void cmpl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void cmplpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void cmplpop_buffer_state (yyscan_t yyscanner );

static void cmplensure_buffer_stack (yyscan_t yyscanner );
static void cmpl_load_buffer_state (yyscan_t yyscanner );
static void cmpl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER cmpl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE cmpl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE cmpl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE cmpl_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *cmplalloc (yy_size_t ,yyscan_t yyscanner );
void *cmplrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void cmplfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer cmpl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cmplensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cmpl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cmplensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cmpl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define cmplwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 84
#define YY_END_OF_BUFFER 85
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[763] =
    {   0,
       80,   80,    2,    2,   85,   83,   84,   80,   83,   84,
       81,   84,   83,   84,   83,   84,   78,   83,   84,   60,
       83,   84,   83,   84,   83,   84,   77,   83,   84,   83,
       84,   83,   84,   83,   84,   56,   57,   83,   84,   83,
       84,   69,   83,   84,   65,   83,   84,   70,   83,   84,
       59,   60,   83,   84,16442,   59,   60,   83,   84,16442,
       82,   83,   84,   59,   60,   83,   84,16442,   59,   60,
       83,   84,16442,   59,   60,   83,   84,16442,   59,   60,
       83,   84,16442,   59,   60,   83,   84,16442,   59,   60,
       83,   84,16442,   59,   60,   83,   84,16442,   59,   60,

       83,   84,16442,   59,   60,   83,   84,16442,   59,   60,
       83,   84,16442,   59,   60,   83,   84,16442,   59,   60,
       83,   84,16442,   59,   60,   83,   84,16442,   59,   60,
       83,   84,16442,   59,   60,   83,   84,16442,   83,   84,
       84,    2,   84,   84,   84,   80,   68,   75,   78,   60,
       73,   76,   64,   61,   57,   78,   56,   57,   54,   71,
       67,   66,   72,   59,   60,16442,   59,   60,16442,   59,
       60,16442,   59,   60,16442,   59,   60,16442,   59,   60,
    16442,   59,   60,16442,   59,   60,16442,   59,   60,16442,
       59,   60,16442,   59,   60,16442,   59,   60,16442,   59,

       60,16442,   59,   60,16442,   59,   60,16442,   59,   60,
    16442,   59,   60,16442,   59,   60,16442,   55,   59,   60,
    16442,   15,   59,   60,16442,   59,   60,16442,   14,   59,
       60,16442,   13,   59,   60,16442,   59,   60,16442,   59,
       60,16442,   59,   60,16442,   59,   60,16442,   59,   60,
    16442,   59,   60,16442,   59,   60,16442,   59,   60,16442,
       59,   60,16442,   59,   60,16442,   59,   60,16442,   59,
       60,16442,   59,   60,16442,   59,   60,16442,   59,   60,
    16442,   59,   60,16442,   59,   60,16442,   74,    2,    3,
        4,   57, 8250,   59,   60,16442,   26,   59,   60,16442,

       59,   60,16442,   59,   60,16442,   59,   60,16442,   59,
       60,16442,   59,   60,16442,   59,   60,16442,   59,   60,
    16442,   18,   59,   60,16442,   34,   59,   60,16442,   33,
       59,   60,16442,   35,   59,   60,16442,   59,   60,16442,
       59,   60,16442,   59,   60,16442,   12,   59,   60,16442,
       59,   60,16442,   59,   60,16442,   59,   60,16442,   59,
       60,16442,   38,   59,   60,16442,   32,   59,   60,16442,
       31,   59,   60,16442,   36,   59,   60,16442,   59,   60,
    16442,   59,   60,16442,   59,   60,16442,   59,   60,16442,
       59,   60,16442,   59,   60,16442,   47,   59,   60,16442,

       17,   59,   60,16442,   59,   60,16442,   59,   60,16442,
       59,   60,16442,   37,   59,   60,16442,   19,   59,   60,
    16442,   59,   60,16442,    6,   59,   60,16442,   79,   59,
       60,16442,   20,   59,   60,16442,   21,   59,   60,16442,
       22,   59,   60,16442,   59,   60,16442,   59,   60,16442,
       27,   59,   60,16442,   59,   60,16442,   59,   60,16442,
       24,   59,   60,16442,   59,   60,16442,   59,   60,16442,
       49,   59,   60,16442,   59,   60,16442,   59,   60,16442,
       59,   60,16442,   59,   60,16442,   59,   60,16442,   59,
       60,16442,   59,   60,16442,   59,   60,16442,   16,   59,

       60,16442,   59,   60,16442,   43,   59,   60,16442,   59,
       60,16442,   59,   60,16442,   23,   59,   60,16442,   11,
       59,   60,16442,   59,   60,16442,   59,   60,16442,   25,
       59,   60,16442,   40,   59,   60,16442,   59,   60,16442,
       59,   60,16442,   59,   60,16442,   51,   59,   60,16442,
        5,   59,   60,16442,   59,   60,16442,   59,   60,16442,
       59,   60,16442,   59,   60,16442,   48,   59,   60,16442,
       28,   59,   60,16442,   59,   60,16442,   59,   60,16442,
       59,   60,16442,   59,   60,16442,    5,   59,   60,16442,
       59,   60,16442,   59,   60,16442,   59,   60,16442,   29,

       59,   60,16442,   30,   59,   60,16442,   59,   60,16442,
       59,   60,16442,   59,   60,16442,   45,   59,   60,16442,
       59,   60,16442,   59,   60,16442,   59,   60,16442,   41,
       59,   60,16442,   59,   60,16442,   39,   59,   60,16442,
       59,   60,16442,   59,   60,16442,   59,   60,16442,   59,
       60,16442,   59,   60,16442,   59,   60,16442,   53,   59,
       60,16442,   46,   59,   60,16442,   59,   60,16442,    1,
       59,   60,16442,   59,   60,16442,   59,   60,16442,   50,
       59,   60,16442,   42,   59,   60,16442,   44,   59,   60,
    16442,   59,   60,16442,   59,   60,16442,   10,   59,   60,

    16442,   59,   60,16442,   59,   60,16442,   63,   59,   60,
    16442,   52,   59,   60,16442,   59,   60,16442,   59,   60,
    16442,   59,   60,16442,   59,   60,16442,   62,   59,   60,
    16442,    7,   59,   60,16442,   59,   60,16442,    9,   59,
       60,16442,    6,   59,   60,16442,    8,   59,   60,16442,
        7,   59,   60,16442,    5,   59,   60,16442,    8,   59,
       60,16442
    } ;

static yyconst flex_int16_t yy_accept[278] =
    {   0,
        1,    2,    3,    4,    5,    6,    8,   11,   13,   15,
       17,   20,   23,   25,   27,   30,   32,   34,   36,   40,
       42,   45,   48,   51,   56,   61,   64,   69,   74,   79,
       84,   89,   94,   99,  104,  109,  114,  119,  124,  129,
      134,  139,  141,  142,  144,  145,  146,  147,  148,  148,
      149,  150,  151,  152,  152,  153,  154,  155,  156,  156,
      156,  156,  157,  157,  159,  159,  160,  161,  162,  163,
      164,  164,  167,  167,  170,  173,  176,  179,  182,  185,
      188,  191,  194,  197,  200,  203,  206,  209,  212,  215,
      218,  222,  226,  229,  233,  237,  240,  243,  246,  249,

      252,  255,  258,  261,  264,  267,  270,  273,  276,  279,
      282,  285,  288,  289,  290,  290,  291,  291,  292,  292,
      292,  292,  292,  292,  293,  294,  297,  301,  304,  307,
      310,  313,  316,  319,  322,  326,  330,  334,  338,  341,
      344,  347,  351,  354,  357,  360,  363,  367,  371,  375,
      379,  382,  385,  388,  391,  394,  397,  401,  405,  408,
      411,  414,  418,  422,  425,  429,  429,  429,  430,  433,
      437,  441,  445,  448,  451,  455,  458,  461,  465,  468,
      471,  475,  478,  481,  484,  487,  490,  493,  496,  499,
      503,  506,  510,  513,  516,  520,  524,  527,  530,  534,

      538,  541,  541,  541,  544,  547,  551,  555,  558,  561,
      564,  567,  571,  575,  578,  581,  584,  587,  591,  594,
      597,  600,  604,  608,  611,  614,  614,  614,  617,  621,
      624,  627,  630,  634,  637,  641,  644,  647,  650,  653,
      656,  659,  663,  667,  670,  670,  670,  674,  677,  680,
      684,  688,  692,  695,  698,  702,  705,  708,  708,  709,
      712,  716,  719,  722,  725,  728,  729,  732,  736,  739,
      743,  747,  751,  755,  759,  763,  763
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    1,    9,   10,   11,
        1,   12,   13,    1,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,    1,   19,
       20,   21,    1,    1,   22,   22,   23,   24,   25,   22,
       22,   22,   26,   22,   22,   27,   22,   28,   22,   22,
       22,   22,   22,   22,   29,   22,   22,   22,   22,   22,
        1,    1,   30,    1,   22,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   22,   53,
       54,   22,    1,   55,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    4,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    2,    1,    1,
        1,    4,    4,    4,    4,    4,    4,    4,    4,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1
    } ;

static yyconst flex_int16_t yy_base[286] =
    {   0,
        0,    0,   54,   55,  242, 1286,  235, 1286,  216,  223,
        0,    0,  218,  203, 1286,  190,   51,   46,   52,  186,
       50,  177,  175,   70,   77, 1286,  104,   43,   64,   84,
       78,   97,  108,  127,  134,  136,  149,  156,  168,  186,
      191,  137, 1286,  187,  182,  168,  173, 1286,  168, 1286,
        0,    0, 1286,  162, 1286, 1286, 1286,   69,  126,  113,
      144,    0,  138,  179,  131, 1286, 1286, 1286, 1286, 1286,
      206,  197,  131,  210,  206,  216,  218,  227,  235,  246,
      250,  258,  262,  266,  277,  282,  288,  293,  306,  310,
      316,  320,  327,  338,  342,  346,  350,  354,  366,  370,

      358,  378,  382,  388,  395,  406,  411,  422,  428,  439,
      443,  447, 1286,  148,  143, 1286,  133, 1286,   88,   87,
      120,   47,  108,  107, 1286,  459,  463,  402,  467,  471,
      479,  487,  491,  487,  506,  509,  497,  516,  518,  521,
      528,  542,  548,  551,  553,  570,  574,  578,  582,  586,
      590,  598,  602,  606,  610,  618,  622,  626,  635,  637,
      643,  654,  658,  666,  670,   86,   79, 1286,  682,  678,
      686,  690,  694,  702,  710,  700,  719,  723,  727,  727,
      745,  749,  753,  761,  769,  773,  777,  742,  783,  786,
      790,  795,  798,  815,  819,  823,  827,  831,  835,  839,

      847,   78,   59,  853,  858,  864,  869,  881,  885,  891,
      898,  902,  910,  916,  916,  924,  923,  940,  930,  937,
      949,  956,  958,  958,  964,   67,   64,  978,  968,  988,
      983,  990,  992,  997, 1003, 1014, 1020, 1026, 1034, 1039,
     1041, 1058, 1062, 1066,   50,   74, 1070, 1078, 1084, 1089,
     1095, 1100, 1106, 1111, 1117, 1125, 1131,   69, 1286, 1136,
     1142, 1147, 1153, 1158, 1166, 1286, 1171, 1173, 1175, 1177,
     1179, 1181, 1185, 1200, 1204, 1286, 1254, 1258, 1262,   79,
     1266, 1269, 1273, 1277, 1281
    } ;

static yyconst flex_int16_t yy_def[286] =
    {   0,
      276,    1,  277,  277,  276,  276,  276,  276,  276,  278,
      279,  280,  276,  281,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  282,  282,  276,  282,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   34,   34,   34,
       34,  276,  276,  276,  283,  284,  276,  276,  278,  276,
      279,  280,  276,  281,  276,  276,  276,  276,  276,  276,
      285,  279,  276,  276,  276,  276,  276,  276,  276,  276,
      276,   34,  276,   34,   27,   27,   27,   27,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       27,   27,   34,   34,   34,   34,   34,   34,   34,   34,

       34,   34,   34,   27,   34,   34,   34,   34,   34,   34,
       34,   34,  276,  276,  283,  276,  284,  276,  276,  276,
      285,  285,  276,  276,  276,   34,   34,   27,   34,   34,
       34,   34,   34,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   27,   34,
       34,   34,   34,   34,   34,  276,  276,  276,   34,   34,
       34,   34,   34,   34,   34,   27,   27,   27,   27,   34,
       34,   34,   34,   34,   34,   34,   34,   27,   27,   27,
       27,   27,   27,   34,   34,   34,   34,   34,   34,   34,

       34,  276,  276,   34,   34,   34,   34,   34,   34,   27,
       34,   34,   34,   27,   34,   34,   27,   34,   27,   27,
       27,   27,   27,   34,   27,  276,  276,   27,   27,   27,
       27,   27,   27,   27,   27,   34,   34,   34,   27,   27,
       34,   34,   34,   34,  276,  276,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,  276,  276,   34,
       34,   34,   34,   34,   27,  276,   27,   27,   27,   27,
       27,   27,   27,   27,   27,    0,  276,  276,  276,  276,
      276,  276,  276,  276,  276
    } ;

static yyconst flex_int16_t yy_nxt[1342] =
    {   0,
        6,    7,    8,    6,    9,   10,   11,   12,   13,   14,
       15,    6,    6,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   24,   24,   24,   25,   24,   24,   24,   26,
       27,   28,   29,   30,   31,   32,   24,   24,   33,   24,
       24,   34,   35,   24,   36,   37,   24,   38,   39,   40,
       24,   41,   24,   24,   42,   44,   44,   61,  122,   45,
       45,   62,  168,   46,   46,   57,   63,   58,   64,   67,
       68,   71,   71,   71,   72,   72,   65,   52,   71,   71,
       71,   79,   52,  266,   52,   58,   65,   73,  259,   59,
       80,   72,   72,   65,   73,   72,   72,  258,   81,   60,

      246,  245,  227,   65,   74,   71,   71,   71,   82,   72,
       85,   52,   72,   72,  226,   72,   72,  203,   83,   86,
      202,   73,   84,  124,  124,   87,   72,   72,   72,   72,
       88,  122,   72,   72,  167,   75,   76,  166,   89,   72,
       72,   90,  118,  123,  123,   72,   72,  124,  116,  114,
      125,   91,   77,   78,   58,  122,   72,   72,   72,   72,
       92,   93,  120,   94,   96,   72,   72,   99,   72,  119,
       95,   55,   97,   50,   47,   72,   72,  118,   98,  100,
       72,   72,   72,   72,   72,   72,  101,  116,  114,   72,
      102,  113,   72,   63,   70,   64,   69,   72,   72,   72,

      103,   72,  104,   65,   72,   66,  105,   71,   71,   71,
       56,   72,   55,   65,  106,  107,  110,  108,  109,   72,
       72,  112,   72,   73,   72,   72,   53,   72,   50,   72,
       72,   72,  126,   72,   72,   48,   47,   72,   72,  111,
       72,  276,  276,   72,   72,  276,   72,   72,   72,   72,
       72,  276,  276,   72,  127,   72,  129,  130,   72,   72,
      128,  276,  276,  276,   72,   72,   72,   72,   72,   72,
      276,   72,  276,  276,  276,   72,   72,  276,  131,   72,
      132,  276,   72,   72,   72,  276,   72,  276,  133,   72,
      276,   72,   72,   72,   72,   72,   72,  136,   72,   72,

       72,  134,   72,  276,  276,   72,  135,  276,  137,   72,
       72,   72,  276,   72,  139,   72,  140,  138,   72,  276,
       72,   72,   72,  276,   72,   72,   72,   72,  276,   72,
      276,   72,  276,  276,  276,  141,   72,  276,  142,   72,
       72,  276,   72,   72,   72,  276,   72,   72,  145,   72,
      143,   72,   72,   72,  276,  276,  276,  144,  276,  276,
       72,   72,  276,   72,   72,  146,  276,  276,   72,   72,
      147,   72,   72,  276,   72,   72,   72,  276,   72,   72,
       72,   72,   72,   72,   72,   72,   72,  150,   72,   72,
       72,   72,   72,  149,   72,  276,  276,   72,  148,   72,

       72,  153,   72,   72,   72,  151,   72,  276,  154,   72,
      276,   72,   72,   72,   72,   72,   72,  152,   72,   72,
       72,   72,  276,  155,  276,   72,  276,  276,   72,   72,
      276,   72,  156,   72,   72,  276,   72,  157,  158,   72,
       72,  160,   72,  276,   72,   72,  276,   72,  276,   72,
      170,   72,  276,  159,   72,   72,   72,  276,   72,  276,
      276,   72,   72,  276,   72,   72,  276,  276,  276,  161,
      162,   72,   72,   72,  276,   72,   72,   72,  276,   72,
       72,   72,  163,   72,  276,  169,   72,  276,  164,  276,
       72,  276,   72,   72,  165,   72,   72,   72,  276,   72,

       72,   72,   72,   72,   72,   72,   72,   72,  276,  173,
      171,  276,   72,   72,  172,   72,  276,  174,   72,   72,
       72,   72,   72,   72,   72,   72,  276,   72,   72,   72,
       72,  276,  175,  276,   72,  176,  177,   72,   72,  179,
       72,   72,  276,  178,  276,   72,   72,   72,   72,   72,
       72,  276,   72,   72,   72,   72,  276,  180,   72,   72,
       72,  276,  181,  182,   72,   72,   72,   72,  276,   72,
       72,  276,  183,   72,   72,  276,   72,   72,  276,   72,
       72,  276,   72,   72,   72,   72,  276,  276,  276,  276,
       72,   72,  184,  185,  186,  276,   72,   72,  276,   72,

       72,   72,   72,   72,  187,  276,   72,   72,   72,  276,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,  188,   72,   72,  276,  189,   72,
      276,   72,   72,   72,   72,  190,   72,  276,   72,  191,
       72,   72,   72,   72,  193,   72,   72,  192,  276,   72,
      276,   72,   72,   72,   72,   72,   72,  276,   72,   72,
       72,  194,   72,  195,  276,   72,   72,   72,  276,   72,
       72,   72,  276,   72,  276,  276,   72,   72,  276,   72,
      197,  198,  276,   72,  196,  276,   72,   72,   72,  276,
       72,   72,   72,  276,   72,  199,  276,   72,  276,   72,

      200,   72,   72,   72,   72,  276,   72,  276,  201,   72,
      204,   72,   72,   72,   72,   72,   72,  276,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,  276,   72,   72,   72,   72,  276,
      276,  205,  206,   72,   72,   72,   72,  276,   72,  207,
       72,   72,  276,   72,   72,   72,  276,  208,   72,   72,
       72,  210,  276,   72,  276,  276,  276,   72,   72,  276,
       72,   72,   72,   72,  217,   72,   72,  209,   72,   72,
      276,   72,   72,  211,  276,   72,   72,   72,   72,   72,
       72,   72,   72,  276,   72,   72,   72,   72,  276,  214,

      212,  276,   72,   72,   72,   72,   72,   72,  213,   72,
       72,   72,   72,  216,   72,   72,   72,   72,   72,  276,
       72,   72,  219,  215,  276,  218,   72,   72,  221,   72,
       72,   72,   72,  276,   72,   72,  276,  276,  220,   72,
      276,  276,  276,   72,   72,  276,   72,   72,  222,   72,
      276,   72,   72,   72,  276,   72,   72,   72,   72,   72,
      223,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,  224,   72,  228,  225,   72,  276,
       72,   72,   72,   72,  276,  276,   72,   72,  276,   72,
       72,   72,   72,  276,   72,  276,   72,   72,   72,  276,

       72,   72,   72,   72,  276,   72,  276,   72,  276,  276,
      276,  229,   72,  276,   72,   72,  230,   72,   72,   72,
      276,   72,   72,   72,  231,  276,  232,  276,   72,  276,
      276,   72,   72,  276,   72,   72,   72,  276,   72,   72,
      233,  234,  276,   72,   72,   72,   72,   72,   72,  236,
       72,  276,   72,   72,   72,   72,  276,   72,  237,   72,
       72,   72,   72,  276,   72,  235,  276,   72,   72,   72,
      276,   72,  238,   72,  239,  276,   72,  276,  240,   72,
       72,   72,  276,   72,  276,   72,  241,   72,   72,   72,
       72,   72,   72,  276,  243,  244,   72,   72,  242,   72,

       72,   72,  247,  276,   72,   72,   72,   72,  276,   72,
       72,  276,   72,   72,   72,   72,   72,   72,  248,   72,
       72,   72,   72,   72,   72,  276,   72,   72,   72,   72,
      276,   72,   72,  249,   72,   72,   72,   72,   72,  250,
       72,   72,  276,  276,  276,   72,  251,   72,  247,  276,
       72,   72,   72,   72,   72,  276,   72,   72,  276,   72,
       72,  276,   72,   72,  253,   72,   72,  252,  276,   72,
       72,   72,  276,  276,  256,   72,  276,   72,  276,  276,
      276,  276,   72,  254,   72,  276,  276,   72,   72,  276,
      255,   72,   72,  276,   72,   72,   72,  276,   72,   72,

       72,   72,   72,   72,   72,   72,   72,  257,  276,   72,
      276,   72,   72,   72,   72,  276,  260,   72,  261,  276,
       72,   72,   72,   72,  276,   72,  276,   72,   72,   72,
      276,   72,   72,   72,   72,  276,   72,  276,   72,   72,
       72,  276,   72,   72,   72,  263,  276,   72,  276,   72,
       72,   72,  276,   72,   72,  276,  276,  262,   72,   72,
       72,   72,  276,  264,   72,  265,  276,   72,   72,   72,
       72,  276,   72,  276,   72,   72,   72,  276,   72,  267,
       72,  268,  276,   72,  276,   72,   72,   72,  276,   72,
       72,   72,   72,  276,   72,  276,   72,   72,   72,  276,

      269,  270,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,  271,   72,   72,   72,  276,   72,
      272,  273,   72,  274,   72,   72,   72,   72,   72,  275,
       72,   72,   72,   72,   72,   72,   72,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,   72,   72,
      276,  276,   72,   72,   43,   43,   43,   43,   49,   49,
       49,   49,   51,   51,  276,   51,   54,   54,   54,   54,
       72,   72,   72,  115,  115,  115,  115,  117,  117,  117,
      117,  121,  121,  121,  121,    5,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276
    } ;

static yyconst flex_int16_t yy_chk[1342] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,   18,  122,    3,
        4,   18,  122,    3,    4,   17,   19,   17,   19,   21,
       21,   24,   24,   24,   28,   28,   19,   24,   25,   25,
       25,   28,  280,  258,   25,   58,   19,   24,  246,   17,
       28,   28,   28,   58,   25,   29,   29,  245,   29,   17,

      227,  226,  203,   58,   25,   27,   27,   27,   29,   31,
       31,   27,   29,   29,  202,   30,   30,  167,   30,   31,
      166,   27,   30,  124,  123,   31,   31,   31,   32,   32,
       31,  121,   30,   30,  120,   27,   27,  119,   32,   33,
       33,   32,  117,   65,   65,   32,   32,   65,  115,  114,
       73,   33,   27,   27,   63,   61,   33,   33,   34,   34,
       34,   34,   60,   34,   35,   35,   35,   36,   36,   59,
       34,   54,   35,   49,   47,   34,   34,   46,   35,   37,
       37,   37,   35,   35,   36,   36,   38,   45,   44,   38,
       38,   42,   38,   64,   23,   64,   22,   37,   37,   38,

       38,   39,   39,   64,   39,   20,   39,   71,   71,   71,
       16,   39,   14,   64,   39,   39,   40,   39,   39,   40,
       40,   41,   40,   71,   41,   41,   13,   41,   10,   40,
       72,   72,   74,   72,   41,    9,    7,   75,   75,   40,
       72,    5,    0,   74,   74,    0,   74,   76,   76,   77,
       77,    0,    0,   74,   75,   75,   77,   78,   78,   78,
       76,    0,    0,    0,   76,   76,   77,   77,   79,   79,
        0,   79,    0,    0,    0,   78,   78,    0,   79,   80,
       80,    0,   80,   81,   81,    0,   81,    0,   81,   80,
        0,   82,   82,   81,   82,   83,   83,   83,   83,   84,

       84,   82,   84,    0,    0,   83,   82,    0,   84,   84,
       85,   85,    0,   85,   85,   86,   86,   84,   86,    0,
       85,   87,   87,    0,   87,   86,   88,   88,    0,   88,
        0,   87,    0,    0,    0,   87,   88,    0,   88,   89,
       89,    0,   89,   90,   90,    0,   90,   91,   91,   89,
       89,   92,   92,   90,    0,    0,    0,   90,    0,    0,
       93,   93,    0,   93,   91,   91,    0,    0,   92,   92,
       93,   94,   94,    0,   94,   95,   95,    0,   95,   96,
       96,   94,   96,   97,   97,   95,   97,   98,   98,   96,
       98,  101,  101,   97,  101,    0,    0,   98,   96,   99,

       99,  101,   99,  100,  100,   99,  100,    0,  102,   99,
        0,  102,  102,  100,  102,  103,  103,  100,  103,  104,
      104,  102,    0,  102,    0,  103,    0,    0,  105,  105,
        0,  105,  103,  128,  128,    0,  104,  104,  105,  106,
      106,  107,  106,    0,  107,  107,    0,  107,    0,  106,
      128,  128,    0,  106,  107,  108,  108,    0,  108,    0,
        0,  109,  109,    0,  109,  108,    0,    0,    0,  108,
      109,  109,  110,  110,    0,  110,  111,  111,    0,  111,
      112,  112,  110,  112,    0,  126,  111,    0,  111,    0,
      112,    0,  126,  126,  112,  126,  127,  127,    0,  127,

      129,  129,  126,  129,  130,  130,  127,  130,    0,  131,
      129,    0,  131,  131,  130,  131,    0,  132,  134,  134,
      132,  132,  131,  132,  133,  133,    0,  133,  137,  137,
      132,    0,  133,    0,  133,  134,  134,  135,  135,  136,
      136,  136,    0,  135,    0,  137,  137,  138,  138,  139,
      139,    0,  140,  140,  135,  135,    0,  136,  136,  141,
      141,    0,  139,  140,  138,  138,  139,  139,    0,  140,
      140,    0,  141,  142,  142,    0,  141,  141,    0,  143,
      143,    0,  144,  144,  145,  145,    0,    0,    0,    0,
      142,  142,  143,  144,  145,    0,  143,  143,    0,  144,

      144,  145,  145,  146,  146,    0,  146,  147,  147,    0,
      147,  148,  148,  146,  148,  149,  149,  147,  149,  150,
      150,  148,  150,  151,  151,  149,  151,    0,  152,  150,
        0,  152,  152,  151,  152,  153,  153,    0,  153,  154,
      154,  152,  154,  155,  155,  153,  155,  154,    0,  154,
        0,  156,  156,  155,  156,  157,  157,    0,  157,  158,
      158,  156,  158,  158,    0,  157,  159,  159,    0,  158,
      160,  160,    0,  160,    0,    0,  161,  161,    0,  161,
      160,  161,    0,  159,  159,    0,  161,  162,  162,    0,
      162,  163,  163,    0,  163,  163,    0,  162,    0,  164,

      164,  163,  164,  165,  165,    0,  165,    0,  165,  164,
      169,  170,  170,  165,  170,  169,  169,    0,  169,  171,
      171,  170,  171,  172,  172,  169,  172,  173,  173,  171,
      173,  176,  176,  172,    0,  174,  174,  173,  174,    0,
        0,  173,  174,  175,  175,  174,  175,    0,  176,  176,
      177,  177,    0,  175,  178,  178,    0,  177,  179,  179,
      180,  180,    0,  180,    0,    0,    0,  177,  177,    0,
      180,  178,  178,  188,  188,  179,  179,  179,  181,  181,
        0,  181,  182,  182,    0,  182,  183,  183,  181,  183,
      188,  188,  182,    0,  184,  184,  183,  184,    0,  185,

      183,    0,  185,  185,  184,  185,  186,  186,  184,  186,
      187,  187,  185,  187,  189,  189,  186,  190,  190,    0,
      187,  191,  191,  186,    0,  189,  192,  192,  193,  193,
      193,  189,  189,    0,  190,  190,    0,    0,  191,  191,
        0,    0,    0,  192,  192,    0,  193,  193,  194,  194,
        0,  194,  195,  195,    0,  195,  196,  196,  194,  196,
      197,  197,  195,  197,  198,  198,  196,  198,  199,  199,
      197,  199,  200,  200,  198,  200,  204,  201,  199,    0,
      201,  201,  200,  201,    0,    0,  204,  204,    0,  204,
      201,  205,  205,    0,  205,    0,  204,  206,  206,    0,

      206,  205,  207,  207,    0,  207,    0,  206,    0,    0,
        0,  205,  207,    0,  208,  208,  207,  208,  209,  209,
        0,  209,  210,  210,  208,    0,  209,    0,  209,    0,
        0,  211,  211,    0,  211,  212,  212,    0,  212,  210,
      210,  211,    0,  213,  213,  212,  213,  214,  214,  215,
      215,    0,  215,  213,  217,  217,    0,  216,  216,  215,
      216,  219,  219,    0,  214,  214,    0,  216,  220,  220,
        0,  217,  217,  218,  218,    0,  218,    0,  219,  219,
      221,  221,    0,  218,    0,  220,  220,  222,  222,  223,
      223,  224,  224,    0,  224,  225,  225,  221,  221,  229,

      229,  224,  228,    0,  222,  222,  223,  223,    0,  228,
      228,    0,  225,  225,  231,  231,  229,  229,  230,  230,
      230,  232,  232,  233,  233,    0,  228,  228,  234,  234,
        0,  231,  231,  231,  235,  235,  230,  230,  232,  232,
      233,  233,    0,    0,    0,  234,  234,  236,  236,    0,
      236,  235,  235,  237,  237,    0,  237,  236,    0,  238,
      238,    0,  238,  237,  238,  239,  239,  237,    0,  238,
      240,  240,    0,    0,  241,  241,    0,  241,    0,    0,
        0,    0,  239,  239,  241,    0,    0,  240,  240,    0,
      240,  242,  242,    0,  242,  243,  243,    0,  243,  244,

      244,  242,  244,  247,  247,  243,  247,  244,    0,  244,
        0,  248,  248,  247,  248,    0,  248,  249,  249,    0,
      249,  248,  250,  250,    0,  250,    0,  249,  251,  251,
        0,  251,  250,  252,  252,    0,  252,    0,  251,  253,
      253,    0,  253,  252,  254,  254,    0,  254,    0,  253,
      255,  255,    0,  255,  254,    0,    0,  253,  256,  256,
      255,  256,    0,  256,  257,  257,    0,  257,  256,  260,
      260,    0,  260,    0,  257,  261,  261,    0,  261,  260,
      262,  262,    0,  262,    0,  261,  263,  263,    0,  263,
      262,  264,  264,    0,  264,    0,  263,  265,  265,    0,

      263,  264,  267,  267,  268,  268,  269,  269,  270,  270,
      271,  271,  272,  272,  265,  265,  273,  273,    0,  267,
      267,  268,  268,  269,  269,  270,  270,  271,  271,  272,
      272,  274,  274,  273,  273,  275,  275,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  274,  274,
        0,    0,  275,  275,  277,  277,  277,  277,  278,  278,
      278,  278,  279,  279,    0,  279,  281,  281,  281,  281,
      282,  282,  282,  283,  283,  283,  283,  284,  284,  284,
      284,  285,  285,  285,  285,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[85] =
    {   0,
0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 
    0, 1, 0, 0, 0,     };

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "src/cmpl/CMPL_Scanner.l"
/***********************************************************************
 *  This code is part of CMPL
 *
 *  Copyright (C) 2007, 2008, 2009, 2010 Thomas Schleiff - Halle(Saale), 
 *  Germany and Mike Steglich - Technical University of Applied Sciences
 *  Wildau, Germany 
 *
 *  Coliop3 and CMPL are projects of the Technical University of 
 *  Applied Sciences Wildau and the Institute for Operations Research 
 *  and Business Management at the Martin Luther University 
 *  Halle-Wittenberg.
 *  Please visit the project homepage <www.coliop.org>
 * 
 *  CMPL is free software; you can redistribute it and/or modify it 
 *  under the terms of the GNU General Public License as published by 
 *  the Free Software Foundation; either version 3 of the License, or 
 *  (at your option) any later version.
 * 
 *  CMPL is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public 
 *  License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses/>.
 *
 ***********************************************************************/
#line 32 "src/cmpl/CMPL_Scanner.l"
#include "Compiler.hh"
#include "FileIO.hh"


/* By default cmpllex returns int, we use token_type.
Unfortunately yyterminate by default returns 0, which is
not of token_type.  */
#define yyterminate() return token::END

// Scanner verwendet YYSTYPE und YYLTYPE, waehrend Parser yy::CMPL_Parser::semantic_type und yy::CMPL_Parser::location_type verwendet
#define YYSTYPE cmpl::CMPL_Parser::semantic_type
#define YYLTYPE cmpl::CMPL_Parser::location_type

typedef cmpl::CMPL_Parser::token token;
/* 1.1.3 TS: the "incl" state is used for picking up the name of an include file */

/* Definition von Abkuerzungen */
#line 984 "src/cmpl/_CMPL_Scanner.cc"

#define INITIAL 0
#define incl 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int cmpllex_init (yyscan_t* scanner);

int cmpllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cmpllex_destroy (yyscan_t yyscanner );

int cmplget_debug (yyscan_t yyscanner );

void cmplset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE cmplget_extra (yyscan_t yyscanner );

void cmplset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *cmplget_in (yyscan_t yyscanner );

void cmplset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *cmplget_out (yyscan_t yyscanner );

void cmplset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t cmplget_leng (yyscan_t yyscanner );

char *cmplget_text (yyscan_t yyscanner );

int cmplget_lineno (yyscan_t yyscanner );

void cmplset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * cmplget_lval (yyscan_t yyscanner );

void cmplset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *cmplget_lloc (yyscan_t yyscanner );
    
        void cmplset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cmplwrap (yyscan_t yyscanner );
#else
extern int cmplwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cmpllex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int cmpllex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 66 "src/cmpl/CMPL_Scanner.l"


	/* 1.1.3 TS: Behandlung von include (nach der Dokumentation von flex) */
#line 1241 "src/cmpl/_CMPL_Scanner.cc"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)cmplalloc(YY_STATE_BUF_SIZE  ,yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in cmpllex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cmplensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				cmpl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		cmpl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 277 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1286 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 69 "src/cmpl/CMPL_Scanner.l"
BEGIN(incl);		/* include beginnt */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 70 "src/cmpl/CMPL_Scanner.l"
;					/* Whitespace zwischen include und Dateiname überlesen */
	YY_BREAK
case 3:
/* rule 3 can match eol */
#line 72 "src/cmpl/CMPL_Scanner.l"
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 72 "src/cmpl/CMPL_Scanner.l"
{ 					/* Dateiname der einzufügenden Datei */ 
								yyin = PARSE_CONTEXT.open_include_file(yylval);
								cmplpush_buffer_state(cmpl_create_buffer(yyin,YY_BUF_SIZE,yyg ),yyg );
								GLV->akt_src_line = 1;
								BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(incl):
#line 77 "src/cmpl/CMPL_Scanner.l"
{ cmplpop_buffer_state(yyg );
								PARSE_CONTEXT.include_pop();
								if ( YY_CURRENT_BUFFER ) { GLV->akt_src_line = yylineno; }
								else { yyterminate(); } }
	YY_BREAK
/* program sections */
case 5:
YY_RULE_SETUP
#line 84 "src/cmpl/CMPL_Scanner.l"
{ return(token::SECT_PARAM); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 85 "src/cmpl/CMPL_Scanner.l"
{ return(token::SECT_VAR); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 86 "src/cmpl/CMPL_Scanner.l"
{ return(token::SECT_OBJ); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 87 "src/cmpl/CMPL_Scanner.l"
{ return(token::SECT_CSTR); }
	YY_BREAK
/* funcions and  operators */
case 9:
YY_RULE_SETUP
#line 90 "src/cmpl/CMPL_Scanner.l"
{ return(token::READSTDIN); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 91 "src/cmpl/CMPL_Scanner.l"
{ return(token::READCSV); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 93 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_SQRT; return(token::MATHFUNC);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 94 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_EXP; return(token::MATHFUNC);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 95 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_LOG; return(token::MATHFUNC);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 96 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_LOG10; return(token::MATHFUNC);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 97 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_LOG2; return(token::MATHFUNC);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 98 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_RAND; return(token::MATHFUNC);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 99 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_SIN; return(token::MATHFUNC);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 100 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_COS; return(token::MATHFUNC);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 101 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_TAN; return(token::MATHFUNC);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 102 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_ACOS; return(token::MATHFUNC);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 103 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_ASIN; return(token::MATHFUNC);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 104 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_ATAN; return(token::MATHFUNC);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 105 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_SINH; return(token::MATHFUNC);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 106 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_COSH; return(token::MATHFUNC);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 107 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_TANH; return(token::MATHFUNC);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 108 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_ABS; return(token::MATHFUNC);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 109 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_CEIL; return(token::MATHFUNC);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 110 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_FLOOR; return(token::MATHFUNC);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 111 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_ROUND; return(token::MATHFUNC);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 112 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_SEED; return(token::MATHFUNC);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 114 "src/cmpl/CMPL_Scanner.l"
{ return(token::FCT_MIN); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 115 "src/cmpl/CMPL_Scanner.l"
{ return(token::FCT_MAX); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 116 "src/cmpl/CMPL_Scanner.l"
{ return(token::DIM); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 117 "src/cmpl/CMPL_Scanner.l"
{ return(token::DEF); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 118 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::DIV); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 119 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::MOD); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 120 "src/cmpl/CMPL_Scanner.l"
{ return(token::SUM); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 121 "src/cmpl/CMPL_Scanner.l"
{ return(token::LEN); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 122 "src/cmpl/CMPL_Scanner.l"
{ return(token::FORMAT); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 123 "src/cmpl/CMPL_Scanner.l"
{ return(token::TYPE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 124 "src/cmpl/CMPL_Scanner.l"
{ return(token::DEFSET); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 125 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::IN_SET); }
	YY_BREAK
/* Variablentypen und Konstantentypen (in getypten Zuweisungen folgt ":=", deshalb das auch vorsehen) */
case 43:
YY_RULE_SETUP
#line 128 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_REAL); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 129 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_INT); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 130 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_BINARY); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 131 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_STRING); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 132 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_SET); }
	YY_BREAK
/* Error-Anweisung */
case 48:
YY_RULE_SETUP
#line 135 "src/cmpl/CMPL_Scanner.l"
{ return(token::ERRMSG); }
	YY_BREAK
/* 1.1.3 stegger user defined message */
case 49:
YY_RULE_SETUP
#line 138 "src/cmpl/CMPL_Scanner.l"
{ return(token::USRMSG); }
	YY_BREAK
/* Schleifenkontrolle */
case 50:
YY_RULE_SETUP
#line 141 "src/cmpl/CMPL_Scanner.l"
{ return(token::DEFAULT); }
	YY_BREAK
/* while					{ return(token::WHILE); } */	/* Nur hier als Token auskommentiert, ansonsten weiter verwendbar */
case 51:
YY_RULE_SETUP
#line 143 "src/cmpl/CMPL_Scanner.l"
{ return(token::BREAK); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 144 "src/cmpl/CMPL_Scanner.l"
{ return(token::CONTINUE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 145 "src/cmpl/CMPL_Scanner.l"
{ return(token::REPEAT); }
	YY_BREAK
/* Zuweisung/Iteration */
case 54:
YY_RULE_SETUP
#line 148 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::ASSIGN); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 149 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::ASSIGN_ITER); }
	YY_BREAK
/* Zahlenkonstante */
case 56:
YY_RULE_SETUP
#line 152 "src/cmpl/CMPL_Scanner.l"
{ return(PARSE_CONTEXT.test_number(yylval)); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 153 "src/cmpl/CMPL_Scanner.l"
{ sscanf(yytext, "%lf", &(yylval->d));
							  return(token::DOUBLE_NUMBER); }
	YY_BREAK
/* Namen */
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 157 "src/cmpl/CMPL_Scanner.l"
{ /* Symbol mit Zuweisung, fuer Zuweisung von temporaeren Konstanten in allen Abschnitten benoetigt */
							  cmpl::CMPL_Parser::token_type t = PARSE_CONTEXT.test_symbol(yylval);
							  return (t == token::DEFS_TMP ? token::DEFS_TMP_ASSIGN : t); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 160 "src/cmpl/CMPL_Scanner.l"
{ return(PARSE_CONTEXT.test_symbol(yylval)); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 161 "src/cmpl/CMPL_Scanner.l"
{ strncpy(GLV->last_str, yytext, COMP_STR_LEN);
							  GLV->last_str[COMP_STR_LEN] = '\0';
							  return(token::LINENAME_SYMBOL); }
	YY_BREAK
/* Indexbereich bzw. Angabe fuer Sets */
case 61:
YY_RULE_SETUP
#line 166 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::POINTS); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 167 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::SET_ALL_NUM); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 168 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::SET_ALL_STR); }
	YY_BREAK
/* Angabe Optimierungsrichtung */
case 64:
YY_RULE_SETUP
#line 171 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::OBJ_TO); }
	YY_BREAK
/* Vergleichsoperatoren */
case 65:
YY_RULE_SETUP
#line 174 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(cmpl::CMPL_Parser::token_type('=')); } /* auch Zuweisung (veraltet) */
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 175 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::VERG_EQ2); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 176 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::VERG_NE); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 177 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::VERG_NE2); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 178 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::VERG_LT); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 179 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::VERG_GT); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 180 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::VERG_LE); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 181 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::VERG_GE); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 183 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::LOG_AND); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 184 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::LOG_OR); }
	YY_BREAK
/* String */
case 75:
/* rule 75 can match eol */
#line 188 "src/cmpl/CMPL_Scanner.l"
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 188 "src/cmpl/CMPL_Scanner.l"
{ /* String als TP_ISTR einfuegen und Nummer an Parser */
                              cmpl::val_str val;
							  strncpy(GLV->last_str, yytext+1, COMP_STR_LEN); 
							  GLV->last_str[COMP_STR_LEN] = '\0';
							  GLV->last_str[strlen(GLV->last_str)-1] = '\0';
							  GLV->string_to_istr(&val, GLV->last_str, true);
							  yylval->i = val.v.i;
							  return(token::STRING); }
	YY_BREAK
/* arithmetische Klammer oder Beginn Wertliste bei Vektordefinition */
case 77:
YY_RULE_SETUP
#line 198 "src/cmpl/CMPL_Scanner.l"
{ if(GLV->is_scann_const_vekt &&
							GLV->index_info.i_akt_ind < GLV->index_info.i_free_ind) {
								GLV->index_info.i_akt_ind++;
								return(token::VEKT_BEG); }	/* Beginn Wertliste */
							else return(cmpl::CMPL_Parser::token_type('('));	}	/* arithmetische Klammer */
	YY_BREAK
/* Kommentar */
case 78:
YY_RULE_SETUP
#line 205 "src/cmpl/CMPL_Scanner.l"
;
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 206 "src/cmpl/CMPL_Scanner.l"
;
	YY_BREAK
/* Whitespaces */
case 80:
YY_RULE_SETUP
#line 209 "src/cmpl/CMPL_Scanner.l"
;
	YY_BREAK
/* neue Zeile, Zeilennummer in den Zwischencode */
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 211 "src/cmpl/CMPL_Scanner.l"
{ COMP(SRC_LINE, 1);
						  GLV->akt_src_line = yylineno;		/* 1.1.3 TS: akt_src_line nicht mehr selber zählen, sondern aus yylineno übernehmen */
						  COMP_INT(GLV->akt_src_line); }
	YY_BREAK
/* uebrige Zeichen (Operatoren, Klammern, Semikolon, Doppelpunkt, Komma) */
case 82:
YY_RULE_SETUP
#line 216 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 1; return(cmpl::CMPL_Parser::token_type(*yytext)); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 217 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(cmpl::CMPL_Parser::token_type(*yytext)); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 220 "src/cmpl/CMPL_Scanner.l"
ECHO;
	YY_BREAK
#line 1840 "src/cmpl/_CMPL_Scanner.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * cmpllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( cmplwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of cmpllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cmplrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cmplrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 277 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 277 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 276);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cmplrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cmplwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cmplrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        cmplensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            cmpl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	cmpl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	cmpl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void cmpl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cmplpop_buffer_state();
	 *		cmplpush_buffer_state(new_buffer);
     */
	cmplensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cmpl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (cmplwrap()) processing, but the only time this flag
	 * is looked at is after cmplwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void cmpl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cmpl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cmplalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cmpl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cmplalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cmpl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	cmpl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cmpl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void cmpl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cmplfree((void *) b->yy_ch_buf ,yyscanner );

	cmplfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cmplrestart() or at EOF.
 */
    static void cmpl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	cmpl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cmpl_init_buffer was _probably_
     * called from cmplrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void cmpl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cmpl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void cmplpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	cmplensure_buffer_stack(yyscanner);

	/* This block is copied from cmpl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cmpl_switch_to_buffer. */
	cmpl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void cmplpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	cmpl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		cmpl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cmplensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)cmplalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in cmplensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)cmplrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in cmplensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cmpl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cmplalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cmpl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cmpl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cmpllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cmpl_scan_bytes() instead.
 */
YY_BUFFER_STATE cmpl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return cmpl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to cmpllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cmpl_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cmplalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cmpl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cmpl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cmpl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE cmplget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int cmplget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int cmplget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *cmplget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *cmplget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t cmplget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *cmplget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void cmplset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void cmplset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "cmplset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void cmplset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "cmplset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see cmpl_switch_to_buffer
 */
void cmplset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void cmplset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int cmplget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void cmplset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * cmplget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void cmplset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *cmplget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void cmplset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* cmpllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int cmpllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) cmplalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* cmpllex_init_extra has the same functionality as cmpllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to cmplalloc in
 * the yyextra field.
 */

int cmpllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    cmplset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) cmplalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    cmplset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cmpllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cmpllex_init()
     */
    return 0;
}

/* cmpllex_destroy is for both reentrant and non-reentrant scanners. */
int cmpllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cmpl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cmplpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	cmplfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        cmplfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    cmplfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cmpllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    cmplfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cmplalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *cmplrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cmplfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see cmplrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 220 "src/cmpl/CMPL_Scanner.l"




namespace cmpl
{
	/* Startet den Scanner */
	void Compiler::scan_begin()
	{
		io_type_str *ios;

		/* Scanner bereitstellen */
		cmpllex_init(&scanner);

		/* Datei fuer Scanner setzen */
		ios = &(glvar->aufruf_p->input);

		/* 1.1.3: Initialisierung fuer include */
		include_init();

		/* 1.1.3: Eingabedatei als ersten Eintrag fuer include-Stack setzen */
		if (ios->filename == (char *)0)
		{
#ifdef CHDIR
			glvar->incl_dir_name[glvar->incl_stack_ptr] = glvar->dir_start_name;
#endif
			glvar->incl_file_name[glvar->incl_stack_ptr] = (char *)0;
			glvar->incl_stack_ptr++;

			include_set_filename((char *)0);
		}
		else
		{
			include_push(ios->filename);
		}
		
		/* Erstmal nur Datei als Eingabe moeglich */
		if (ios->file_fp != (FILE *)0)
			cmplrestart (ios->file_fp, scanner);
	}

	/* Beendet den Scanner */
	void Compiler::scan_end()
	{
#ifdef CHDIR
		/* 1.1.3: Ausgangs-Directory wieder setzen */
		chdir(glvar->dir_start_name.c_str());
#endif

		/* Scanner wieder freigeben */
		cmpllex_destroy(scanner);
		scanner = (void *)0;
	}

	/* Test, ob ganze Zahl im int-Wertebereich liegt */
	CMPL_Parser::token_type Compiler::test_number(YYSTYPE *yyvalp)
	{
		char str[20];
		struct yyguts_t * yyg = (struct yyguts_t*)scanner;

		yyvalp->i = atoi(yytext);
		sprintf(str, "%d", yyvalp->i);
		if(strncmp(yytext, str, 20)==0) return(token::INT_NUMBER);
		sscanf(yytext, "%lf", &(yyvalp->d));
		return(token::DOUBLE_NUMBER);	/* wenn ganze Zahl zu gross fuer int, dann double */
	}


	/* Test, ob Transponierkennzeichen oder welche Symbolart */
	CMPL_Parser::token_type Compiler::test_symbol(YYSTYPE *yyvalp)
	{ 
		int n;
		struct yyguts_t * yyg = (struct yyguts_t*)scanner;

		if(glvar->exp_transp && strcmp(yytext, "T")==0) return(token::TRANSPOSE);
		strncpy(glvar->last_str, yytext, SYM_NAME_LEN-1);
		glvar->last_str[SYM_NAME_LEN-1] = '\0';

		if((yyvalp->i = search_symbol(glvar->last_str, &n)) == -1) 
			return(token::UNDEF_SYMBOL);
		else if(yyvalp->i < 0)
			return(token::DEFS_TMP);		/* Laufkonstante */
		else
		{
			PROTO_OUT_2("  tp_sym=%d", (int)glvar->symbol_table[n].tp_sym);
			switch(glvar->symbol_table[n].tp_sym)
			{
				case TPK_VAR:	/* Variable */
					return(token::DEFS_VAR);
				case TPK_VALUE:	/* Einfacher Wert */
					return(token::DEFS_VALUE);
				case TPK_SET:	/* Set */
					return(token::DEFS_SET);

				default:		/* Fehler wegen Nutzung Symbol, das noch in Definition ist */
					SPRINT_ERR_2(ERROR_SYMBOL_INDEF, glvar->last_str);
					output_error_parse(ERROR_TYPE_COMP, ERROR_LVL_NORMAL, glvar->errbuf);
					return(token::DEFS_VALUE);
			}
		}
	}

	FILE* Compiler::open_include_file(YYSTYPE *yyvalp)
	{
		FILE *incl_fp;

		/* Dateiname bestimmen */
		struct yyguts_t * yyg = (struct yyguts_t*)scanner;
		strncpy(glvar->last_str, yytext+1, COMP_STR_LEN);
		glvar->last_str[COMP_STR_LEN] = '\0';
		glvar->last_str[strlen(glvar->last_str)-1] = '\0';

	#ifdef CHDIR
		/* Pfad-Separator tauschen, damit in CMPL unabhaengig vom Betriebssystem immer '/' verwendet werden kann */
		if (glvar->dir_sep_char != '/')
		{
			char *p;
			for (p = glvar->last_str; *p != '\0'; p++)
			{
				if (*p == '/')
					*p = glvar->dir_sep_char;
			}
		}
	#endif

		PROTO_OUT_2("\ninclude '%s'", glvar->last_str);

		/* Datei oeffnen */
		incl_fp = fopen( glvar->last_str, "r" );
		if (! incl_fp)
		{
			/* File not found */
			SPRINT_ERR_2(ERROR_FILE_INPUT_INCL, glvar->last_str);
			output_error_parse(ERROR_TYPE_IO, ERROR_LVL_FATAL, glvar->errbuf);
		}

		/* Info auf den include-Stack */
		include_push(glvar->last_str);

		return incl_fp;
	}
}

