#line 2 "src/cmpl/_CMPL_Scanner.cc"

#line 4 "src/cmpl/_CMPL_Scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cmplrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE cmpllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cmplrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void cmplrestart (FILE *input_file ,yyscan_t yyscanner );
void cmpl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE cmpl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void cmpl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void cmpl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void cmplpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void cmplpop_buffer_state (yyscan_t yyscanner );

static void cmplensure_buffer_stack (yyscan_t yyscanner );
static void cmpl_load_buffer_state (yyscan_t yyscanner );
static void cmpl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER cmpl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE cmpl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE cmpl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE cmpl_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *cmplalloc (yy_size_t ,yyscan_t yyscanner );
void *cmplrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void cmplfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer cmpl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cmplensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cmpl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cmplensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cmpl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define cmplwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 105
#define YY_END_OF_BUFFER 106
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[898] =
    {   0,
      101,  101,    2,    2,   93,   93,  106,  104,  105,  101,
      104,  105,  102,  105,  104,  105,  104,  105,   99,  104,
      105,   73,  104,  105,  104,  105,  104,  105,   98,  104,
      105,  104,  105,   89,  104,  105,  104,  105,   68,   69,
      104,  105,  104,  105,   82,  104,  105,   78,  104,  105,
       83,  104,  105,   72,   73,  104,  105,16455,   72,   73,
      104,  105,16455,  103,  104,  105,   72,   73,  104,  105,
    16455,   72,   73,  104,  105,16455,   72,   73,  104,  105,
    16455,   72,   73,  104,  105,16455,   72,   73,  104,  105,
    16455,   72,   73,  104,  105,16455,   72,   73,  104,  105,

    16455,   72,   73,  104,  105,16455,   72,   73,  104,  105,
    16455,   72,   73,  104,  105,16455,   72,   73,  104,  105,
    16455,   72,   73,  104,  105,16455,   72,   73,  104,  105,
    16455,   72,   73,  104,  105,16455,   72,   73,  104,  105,
    16455,   72,   73,  104,  105,16455,   72,   73,  104,  105,
    16455,   72,   73,  104,  105,16455,  104,  105,  105,    2,
      105,  105,  105,   95,  105,   93,   95,  105,   94,  105,
       91,   95,  105,   95,  105,   90,   95,  105,  101,   81,
       96,   99,   73,   87,   97,   77,   74,   69,   99,   68,
       69,   66,   86,   84,   80,   79,   85,   72,   73,16455,

       72,   73,16455,   72,   73,16455,   72,   73,16455,   72,
       73,16455,   72,   73,16455,   72,   73,16455,   72,   73,
    16455,   72,   73,16455,   72,   73,16455,   72,   73,16455,
       72,   73,16455,   72,   73,16455,   72,   73,16455,   72,
       73,16455,   72,   73,16455,   72,   73,16455,   72,   73,
    16455,   67,   72,   73,16455,   72,   73,16455,   15,   72,
       73,16455,   72,   73,16455,   14,   72,   73,16455,   13,
       72,   73,16455,   72,   73,16455,   72,   73,16455,   72,
       73,16455,   72,   73,16455,   72,   73,16455,   72,   73,
    16455,   72,   73,16455,   72,   73,16455,   72,   73,16455,

       72,   73,16455,   72,   73,16455,   72,   73,16455,   72,
       73,16455,   72,   73,16455,   72,   73,16455,   72,   73,
    16455,   72,   73,16455,   72,   73,16455,   72,   73,16455,
       72,   73,16455,   72,   73,16455,   88,    2,    3,    4,
       93,   91,   91,   90,   69, 8263,   72,   73,16455,   26,
       72,   73,16455,   72,   73,16455,   72,   73,16455,   72,
       73,16455,   72,   73,16455,   72,   73,16455,   72,   73,
    16455,   72,   73,16455,   18,   72,   73,16455,   72,   73,
    16455,   34,   72,   73,16455,   33,   72,   73,16455,   35,
       72,   73,16455,   72,   73,16455,   72,   73,16455,   72,

       73,16455,   12,   72,   73,16455,   72,   73,16455,   72,
       73,16455,   72,   73,16455,   72,   73,16455,   72,   73,
    16455,   38,   72,   73,16455,   32,   72,   73,16455,   31,
       72,   73,16455,   36,   72,   73,16455,   72,   73,16455,
       72,   73,16455,   72,   73,16455,   72,   73,16455,   72,
       73,16455,   72,   73,16455,   62,   72,   73,16455,   72,
       73,16455,   72,   73,16455,   55,   72,   73,16455,   17,
       72,   73,16455,   72,   73,16455,   72,   73,16455,   72,
       73,16455,   72,   73,16455,   72,   73,16455,   37,   72,
       73,16455,   19,   72,   73,16455,   72,   73,16455,   72,

       73,16455,   72,   73,16455,  100,   72,   73,16455,   20,
       72,   73,16455,   21,   72,   73,16455,   22,   72,   73,
    16455,   72,   73,16455,   72,   73,16455,   27,   72,   73,
    16455,   72,   73,16455,   72,   73,16455,   24,   72,   73,
    16455,   72,   73,16455,   72,   73,16455,   72,   73,16455,
       60,   72,   73,16455,   72,   73,16455,   72,   73,16455,
       72,   73,16455,   72,   73,16455,   72,   73,16455,   72,
       73,16455,   46,   72,   73,16455,   70,   72,   73,16455,
       72,   73,16455,   72,   73,16455,   72,   73,16455,   16,
       72,   73,16455,   72,   73,16455,   47,   72,   73,16455,

       72,   73,16455,   72,   73,16455,   23,   72,   73,16455,
       72,   73,16455,   11,   72,   73,16455,   72,   73,16455,
       72,   73,16455,   72,   73,16455,   25,   72,   73,16455,
       40,   72,   73,16455,    6,   72,   73,16455,   45,   72,
       73,16455,   92,   72,   73,16455,   72,   73,16455,   63,
       72,   73,16455,   72,   73,16455,   72,   73,16455,   34,
       72,   73,16455,   72,   73,16455,   72,   73,16455,   72,
       73,16455,   59,   72,   73,16455,   28,   72,   73,16455,
       72,   73,16455,   72,   73,16455,   72,   73,16455,   72,
       73,16455,   72,   73,16455,   72,   73,16455,   72,   73,

    16455,   72,   73,16455,   72,   73,16455,   29,   72,   73,
    16455,   56, 8263,   43,   72,   73,16455,   30,   72,   73,
    16455,   72,   73,16455,   72,   73,16455,   72,   73,16455,
       72,   73,16455,   51,   72,   73,16455,    5,   72,   73,
    16455,   72,   73,16455,   72,   73,16455,   41,   72,   73,
    16455,   72,   73,16455,   39,   72,   73,16455,   72,   73,
    16455,   72,   73,16455,   72,   73,16455,   72,   73,16455,
       72,   73,16455,   72,   73,16455,   72,   73,16455,   48,
     8263,   65,   72,   73,16455,   44,   72,   73,16455,   53,
       72,   73,16455,   72,   73,16455,    1,   72,   73,16455,

       72,   73,16455,   72,   73,16455,   61,   72,   73,16455,
       42,   72,   73,16455,   49,   72,   73,16455,   72,   73,
    16455,   72,   73,16455,   57,   72,   73,16455,   10,   72,
       73,16455,   72,   73,16455,   72,   73,16455,   76,   52,
     8263,   72,   73,16455,   64,   72,   73,16455,   72,   73,
    16455,   72,   73,16455,   72,   73,16455,   54, 8263,   72,
       73,16455,   75,   72,   73,16455,   50, 8263,   72,   73,
    16455,   72,   73,16455,   58, 8263,    9,   72,   73,16455,
       72,   73,16455,   72,   73,16455,    7,   72,   73,16455,
       72,   73,16455,    8,   72,   73,16455

    } ;

static yyconst flex_int16_t yy_accept[347] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,   10,   13,
       15,   17,   19,   22,   25,   27,   29,   32,   34,   37,
       39,   43,   45,   48,   51,   54,   59,   64,   67,   72,
       77,   82,   87,   92,   97,  102,  107,  112,  117,  122,
      127,  132,  137,  142,  147,  152,  157,  159,  160,  162,
      163,  164,  166,  169,  171,  174,  176,  179,  180,  181,
      181,  182,  183,  184,  185,  185,  186,  187,  188,  189,
      189,  189,  189,  190,  190,  192,  192,  193,  194,  195,
      196,  197,  198,  198,  201,  201,  204,  207,  210,  213,
      216,  219,  222,  225,  228,  231,  234,  237,  240,  243,

      246,  249,  252,  256,  259,  263,  266,  270,  274,  277,
      280,  283,  286,  289,  292,  295,  298,  301,  304,  307,
      310,  313,  316,  319,  322,  325,  328,  331,  334,  337,
      338,  339,  339,  340,  340,  341,  342,  343,  343,  344,
      345,  345,  345,  345,  345,  345,  346,  347,  350,  354,
      357,  360,  363,  366,  369,  372,  375,  379,  382,  386,
      390,  394,  397,  400,  403,  407,  410,  413,  416,  419,
      422,  426,  430,  434,  438,  441,  444,  447,  450,  453,
      456,  460,  463,  466,  470,  474,  477,  480,  483,  486,
      489,  493,  497,  500,  503,  506,  506,  506,  506,  506,

      507,  510,  514,  518,  522,  525,  528,  532,  535,  538,
      542,  545,  548,  551,  555,  558,  561,  564,  567,  570,
      573,  577,  581,  584,  587,  590,  594,  597,  601,  604,
      607,  607,  607,  611,  614,  618,  621,  624,  627,  631,
      635,  636,  639,  643,  644,  644,  644,  647,  650,  654,
      657,  660,  664,  667,  670,  673,  677,  681,  684,  687,
      690,  693,  696,  699,  702,  705,  705,  705,  708,  712,
      714,  718,  722,  725,  728,  731,  731,  731,  734,  738,
      739,  742,  745,  748,  752,  755,  759,  762,  765,  768,
      771,  774,  777,  780,  782,  786,  790,  794,  797,  797,

      797,  801,  801,  801,  804,  807,  811,  815,  819,  822,
      825,  829,  833,  836,  836,  836,  839,  839,  840,  842,
      845,  849,  849,  849,  852,  855,  855,  855,  858,  860,
      863,  864,  867,  869,  872,  875,  877,  881,  884,  887,
      888,  891,  894,  895,  898,  898
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
        1,   13,   14,    1,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
       21,   22,    1,    1,   23,   23,   24,   25,   26,   23,
       23,   23,   27,   23,   23,   28,   23,   29,   23,   23,
       23,   23,   23,   23,   30,   23,   23,   23,   23,   23,
        1,    1,   31,    1,   23,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   23,    1,   57,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[58] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    4,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    2,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_int16_t yy_base[358] =
    {   0,
        0,    0,   56,   57,   68,    0,  399, 1557,  396, 1557,
      368,  378,    0,    0,  370,  365, 1557,  351,  110,   47,
      111,  351,  110,  350,  348,  132,  140, 1557,  168,  105,
      128,  148,  157,  170,  160,  189,  192,  201,  198,  211,
      221,  228,  240,  258,  263,  274,  311, 1557,  357,  350,
      343, 1557,  348, 1557,    0,   48,    0,  343, 1557,  336,
     1557,    0,    0, 1557,  325, 1557, 1557, 1557,  131,  279,
      266,  300,    0,  293,  147,  171, 1557, 1557, 1557, 1557,
     1557, 1557,  265,  179,  286,  280,  287,  289,  293,  296,
      296,  313,  317,  325,  329,  343,  347,  355,  359,  367,

      371,  375,  385,  388,  392,  392,  409,  413,  417,  421,
      425,  433,  439,  447,  452,  464,  469,  475,  484,  486,
      494,  505,  510,  521,  527,  538,  542,  546,  558, 1557,
      303,  296, 1557,  289, 1557,  295,    0,  274,    0,    0,
      232,  233,  266,  179,  247,  241, 1557,  564,  569,  518,
      575,  580,  591,  596,  602,  609,  615,  617,  624,  617,
      630,  636,  639,  645,  643,  651,  665,  670,  672,  687,
      691,  699,  703,  707,  711,  715,  723,  729,  729,  740,
      746,  751,  757,  769,  762,  768,  775,  779,  777,  789,
      785,  798,  806,  819,  812,  245,  264,  221,  216, 1557,

      835,  827,  833,  837,  840,  859,  846,  848,  871,  869,
      873,  879,  880,  897,  901,  905,  913,  921,  925,  929,
      933,  937,  894,  946,  950,  952,  954, 1004,  977,  979,
     1016,  225,  994,  998, 1002, 1006, 1010, 1014, 1018, 1022,
      217, 1033, 1037, 1557,  198,  164, 1041, 1045, 1049, 1069,
     1057, 1061, 1074, 1082, 1085, 1089, 1093, 1102, 1104, 1109,
     1117, 1124, 1120, 1130, 1137, 1170,  176, 1142, 1144, 1557,
     1149, 1151, 1157, 1168, 1164,  159,  142, 1183, 1216,  156,
     1178, 1188, 1192, 1197, 1203, 1211, 1214, 1220, 1228, 1237,
     1241, 1243, 1244, 1557, 1262, 1266, 1306, 1277,  126,  152,

     1281, 1325,  145, 1295, 1301, 1307, 1312, 1351, 1326, 1330,
     1370, 1345, 1356, 1383,  137, 1362,  137, 1557, 1557, 1368,
     1373, 1412,  131, 1384, 1388, 1432,  125, 1403, 1557, 1394,
     1557, 1409, 1557, 1413, 1416, 1557, 1419, 1421, 1442,  120,
     1446, 1449,  112, 1454, 1557, 1505, 1510, 1515, 1517, 1522,
     1526, 1531, 1536, 1541,   61, 1546, 1551
    } ;

static yyconst flex_int16_t yy_def[358] =
    {   0,
      345,    1,  346,  346,  345,    5,  345,  345,  345,  345,
      345,  347,  348,  349,  345,  350,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  351,  351,  345,  351,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   37,   37,   37,   37,   37,  345,  345,  345,  352,
      353,  345,  345,  345,  354,  345,  355,  345,  345,  347,
      345,  348,  349,  345,  350,  345,  345,  345,  345,  345,
      345,  356,  348,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,   37,  345,   37,   29,   29,   29,   29,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   29,   29,   29,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   29,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,  345,
      345,  352,  345,  353,  345,  345,  354,  357,  354,  355,
      345,  345,  356,  356,  345,  345,  345,   37,   37,   29,
       37,   37,   37,   37,   37,   29,   29,   37,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   29,   37,   37,
       37,   37,   37,  351,   37,   37,   29,   37,   29,   29,
       29,   29,   37,   37,   29,  357,  357,  345,  345,  345,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   29,   29,   29,   29,   29,  351,   29,   37,
      345,  345,   37,   37,   37,   37,   37,   37,   37,   37,
      345,   37,   37,  345,  345,  345,   37,   37,   37,   37,
       37,   37,   37,   29,   37,   37,   37,   29,   37,   37,
       29,   37,   37,   29,   29,  345,  345,   29,   29,  345,
       29,   29,   29,   37,   29,  345,  345,   29,  351,  345,
       29,   29,   29,   29,   29,   29,   37,   37,   37,   29,
       29,   29,   37,  345,   37,   37,  351,   37,  345,  345,

       37,  345,  345,   37,   37,   37,   37,  351,   37,   37,
      351,   37,   37,  345,  345,   37,  345,  345,  345,   37,
       37,  345,  345,   37,   37,  345,  345,   37,  345,   29,
      345,   29,  345,   29,   29,  345,   29,   29,   29,  345,
       29,   29,  345,   29,    0,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345
    } ;

static yyconst flex_int16_t yy_nxt[1615] =
    {   0,
        8,    9,   10,    8,   11,   12,   13,   14,   13,   15,
       16,   17,    8,    8,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   26,   26,   26,   27,   26,   26,   26,
       28,   29,   30,   31,   32,   33,   34,   26,   26,   35,
       26,   36,   37,   38,   39,   40,   41,   26,   42,   43,
       44,   26,   45,   46,   26,   26,   47,   49,   49,   72,
      138,   50,   50,   73,  139,  140,   51,   51,   52,   53,
       54,   52,   52,   52,   55,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   56,   52,   52,   52,   52,   52,
       57,   57,   57,   57,   57,   57,   57,   57,   52,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   52,   68,   74,   69,   75,   78,
       79,   80,  147,   83,   83,   83,   76,   84,   84,   63,
      147,   83,   83,   83,   91,  336,   76,   63,   69,   70,
       85,  333,  331,   92,   84,   84,   76,  329,   85,   71,
       84,   84,   74,   93,   75,  319,   76,  318,   86,   83,
       83,   83,   76,   94,  317,   63,  147,   84,   84,  300,
       84,   84,   76,   95,  145,  145,   85,   96,  146,   84,
       97,  144,   84,   84,  299,  200,  294,   84,   84,   98,

       87,   88,   84,   84,  103,   99,   84,   84,  277,   84,
       84,  100,  101,   84,   84,  102,   84,   89,   90,   84,
       84,   84,   84,   84,   84,   84,  105,  106,  104,  107,
       84,   84,  109,   84,   84,  276,  108,  147,   84,   84,
      110,   84,   84,  113,   84,  270,  111,   84,   84,  112,
       84,   84,  114,   84,   84,  246,  245,  197,  146,  116,
       84,   84,   84,  117,  146,   84,   83,   83,   83,  115,
       84,   84,   84,  118,   84,  119,  197,   84,  144,  120,
      244,  199,  198,   85,   84,  121,  197,  122,  123,  126,
      124,  125,   84,   84,  128,   84,  136,   84,   84,  135,

       84,  133,   84,  148,  131,  129,  147,   84,   84,   84,
       69,   84,  144,  127,   84,   84,  142,   84,   84,   84,
       84,   84,   84,  141,   84,   84,   84,  152,   84,   84,
       84,   84,  151,   84,  150,   66,  149,   84,   84,   84,
      153,   61,   84,   84,   58,   84,   84,   84,  154,  136,
       84,   84,   84,  135,   84,  133,  155,   84,  131,   84,
       84,   84,   84,   84,   84,  159,   84,  130,   82,  156,
       81,   77,   67,   84,  157,   66,  158,   84,   84,   64,
       84,   84,   84,   61,   84,  162,  160,   84,   59,   84,
      163,   84,   84,   84,   84,  161,   84,   58,  345,   84,

      345,   84,   84,   84,   84,   84,   84,  164,   84,   84,
       84,   84,   84,  165,  345,   84,  166,   84,  168,   84,
       84,   84,  345,  167,   84,   84,   84,   84,  345,   84,
      170,  345,  345,  345,   84,  169,  171,   84,   84,  345,
      345,   84,   84,   84,   84,  345,   84,   84,   84,  345,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  174,
       84,   84,   84,  345,  345,  173,  345,   84,   84,   84,
       84,  172,  345,   84,   84,  175,   84,   84,  345,  176,
      345,   84,   84,   84,   84,  345,   84,   84,  345,   84,
      345,   84,  345,  345,  345,  177,   84,  178,   84,   84,

      180,   84,  345,   84,   84,  181,   84,  345,  179,   84,
       84,  345,   84,   84,  345,  182,   84,   84,  345,   84,
       84,   84,  345,   84,  345,  345,  183,  345,   84,   84,
      185,   84,  345,   84,  184,  345,  186,  345,   84,   84,
       84,  188,   84,  345,   84,   84,  345,   84,  345,   84,
       84,   84,  189,  187,   84,   84,   84,  345,   84,  345,
      345,   84,   84,  345,   84,   84,  345,  202,   84,  190,
      191,   84,   84,   84,  345,   84,   84,   84,  345,   84,
       84,   84,  192,   84,  345,  345,   84,  345,  193,  345,
       84,  201,   84,   84,  194,   84,  345,  195,   84,   84,

      345,   84,   84,   84,   84,  345,   84,  345,   84,   84,
       84,  345,   84,   84,   84,   84,  345,   84,  345,  203,
      345,  345,  205,  345,  204,   84,   84,  206,   84,  345,
       84,   84,  345,   84,  345,   84,   84,   84,  345,   84,
       84,   84,   84,  345,  207,  345,   84,   84,   84,   84,
       84,   84,   84,  210,   84,  212,   84,   84,  208,  209,
      345,  211,   84,   84,   84,   84,   84,   84,   84,   84,
      345,   84,   84,  213,   84,   84,   84,   84,   84,   84,
       84,  214,  215,   84,   84,   84,   84,  345,   84,   84,
      216,  345,   84,   84,   84,   84,  217,   84,   84,  345,

       84,   84,   84,   84,  345,  345,   84,  220,  218,   84,
      345,  345,  219,  345,   84,   84,   84,  345,  345,   84,
       84,   84,   84,  345,   84,   84,   84,  345,   84,  221,
      345,   84,  345,   84,   84,   84,   84,   84,   84,  345,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
      223,   84,   84,  222,  224,   84,  345,   84,   84,   84,
       84,  225,   84,  226,   84,  345,   84,   84,  345,  345,
      231,  231,  231,   84,  227,   84,   63,   84,   84,   84,
       84,   84,  228,   84,   84,   84,  229,  232,   84,  345,
       84,   84,   84,  345,   84,   84,   84,   84,  345,   84,

      233,  230,   84,   84,  345,   84,   84,   84,   84,   84,
       84,  345,   84,   84,   84,  345,   84,   84,   84,  345,
      234,   84,   84,  236,   84,  235,   84,  237,  238,  345,
       84,   84,  345,  345,   84,   84,  239,  241,   84,   84,
       84,  240,  345,   84,   84,   84,  345,   84,   84,  345,
       84,  345,  345,   84,   84,  345,   84,  345,  242,   84,
       84,   84,  243,   84,  247,   84,   84,   84,   84,   84,
       84,  345,   84,   84,  345,  345,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,  248,   84,
       84,   84,   84,  345,  345,   84,   84,   84,  250,  345,

      249,   84,   84,   84,   84,   84,   84,  345,   84,   84,
      251,   84,   84,  345,   84,  254,  345,   84,   84,   84,
       84,   84,   84,  252,   84,  345,   84,  261,   84,   84,
      253,   84,   84,  345,   84,   84,  255,  345,   84,   84,
       84,   84,   84,   84,   84,   84,  345,   84,   84,   84,
       84,  345,  258,  256,  345,   84,   84,   84,   84,   84,
       84,  257,   84,   84,   84,   84,  260,   84,   84,   84,
       84,   84,   84,   84,   84,  345,  259,   84,   84,   84,
      345,   84,   84,   84,   84,   84,   84,  264,  345,  262,
      345,  345,  263,  345,  345,   84,   84,  345,  345,   84,

       84,   84,   84,  265,   84,  266,  266,  266,  268,   84,
       84,   63,  345,  269,   84,  345,   84,  231,  231,  231,
      345,  345,  267,   84,  345,  345,   84,   84,   84,   84,
      345,   84,   84,  271,  232,   84,   84,   84,   84,   84,
      272,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,  274,   84,
      345,  273,   84,  345,  275,  278,   84,   84,   84,  345,
       84,   84,   84,  345,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,  280,  345,   84,
      345,   84,   84,   84,   84,   84,   84,  345,   84,  345,

      279,  282,  345,   84,   84,   84,   84,  345,   84,   84,
      345,   84,  345,   84,   84,   84,  283,  281,   84,   84,
       84,  345,   84,   84,   84,  345,   84,   84,   84,  285,
       84,   84,  284,   84,   84,   84,  345,   84,  287,   84,
      345,   84,  280,   84,  288,  345,   84,  345,   84,   84,
       84,   84,  286,   84,   84,  291,  345,   84,   84,  290,
      345,   84,   84,   84,   84,  345,   84,  289,   84,   84,
       84,  266,  266,  266,   84,   84,   84,   84,  345,  292,
       84,   84,   84,   84,   84,  345,   84,  293,  267,   84,
       84,   84,  295,   84,   84,  345,  298,   84,   84,   84,

       84,   84,   84,   84,  345,  297,  296,   84,  301,  304,
       84,   84,   84,   84,   84,   84,   84,  302,  302,  302,
       84,   84,  345,   63,   84,   84,  345,   84,   84,   84,
       84,  345,   84,   84,  303,   84,   84,   84,   84,  305,
      345,   84,  306,   84,   84,  345,   84,   84,   84,  301,
      345,   84,   84,  307,   84,   84,  345,   84,   84,  345,
       84,   84,   84,   84,   84,   84,  345,  309,  308,   84,
       84,  345,   84,   84,   84,   84,   84,  345,  313,   84,
      345,   84,  345,  345,  311,  345,   84,  310,   84,  345,
       84,   84,   84,   84,  345,  312,   84,   84,  345,   84,

       84,   84,  345,   84,  345,  345,   84,  314,  314,  314,
       84,   84,   84,   63,   84,   84,   84,  345,   84,  316,
      345,   84,  345,  345,  315,   84,  302,  302,  302,   84,
       84,  345,   84,  345,  320,   84,  321,  345,   84,   84,
      345,   84,   84,  303,   84,   84,   84,   84,  345,   84,
      345,   84,  322,  322,  322,  345,   84,  345,   63,  345,
       84,   84,  345,   84,   84,  325,  345,   84,  345,  323,
       84,  326,  326,  326,   84,  345,  345,   63,  324,   84,
       84,  345,   84,  345,  314,  314,  314,  345,  327,   84,
       84,   84,  345,   84,  345,  328,   84,  330,  345,   84,

       84,  315,   84,   84,  345,   84,   84,   84,   84,  345,
       84,  345,  332,  322,  322,  322,  345,   84,   84,  334,
      345,   84,   84,   84,  345,   84,   84,   84,   84,  345,
      323,  340,   84,  326,  326,  326,  335,   84,   84,  241,
       84,   84,   84,  338,   84,   84,   84,  337,   84,   84,
      327,   84,   84,   84,   84,  345,  345,  345,   84,  339,
      343,  345,  341,   84,  340,  342,   84,  280,   84,   84,
       84,   84,  343,  345,   84,   84,  345,  345,   84,   84,
      345,   84,   84,  345,  345,  345,   84,   84,  345,  345,
      345,  344,   84,  345,  345,   84,   84,  345,   84,   84,

      345,  345,  345,   84,   84,   48,   48,   48,   48,   48,
       60,   60,   60,   60,   60,   62,   62,  345,   62,   62,
       63,   63,   65,   65,   65,   65,   65,   84,   84,   84,
       84,  132,  132,  132,  132,  132,  134,  134,  134,  134,
      134,  137,  137,  345,  137,  137,  143,  143,  143,  143,
      143,  196,  196,  196,  196,  196,    7,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345
    } ;

static yyconst flex_int16_t yy_chk[1615] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,   20,
       56,    3,    4,   20,   56,  355,    3,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,   19,   21,   19,   21,   23,
       23,   23,  343,   26,   26,   26,   21,   30,   30,   26,
      340,   27,   27,   27,   30,  327,   21,   27,   69,   19,
       26,  323,  317,   30,   30,   30,   69,  315,   27,   19,
       31,   31,   75,   31,   75,  303,   69,  300,   27,   29,
       29,   29,   75,   31,  299,   29,  280,   31,   31,  277,
       32,   32,   75,   32,   76,   76,   29,   32,   76,   33,
       33,  144,   35,   35,  276,  144,  267,   32,   32,   33,

       29,   29,   34,   34,   35,   33,   33,   33,  246,   35,
       35,   33,   34,   84,   84,   34,   84,   29,   29,   34,
       34,   36,   36,   84,   37,   37,   37,   37,   36,   37,
       39,   39,   38,   38,   38,  245,   37,  241,   36,   36,
       38,   37,   37,   40,   40,  232,   38,   39,   39,   39,
       38,   38,   41,   41,   41,  199,  198,  196,  146,   42,
       40,   40,   42,   42,  145,   42,   83,   83,   83,   41,
       41,   41,   42,   42,   43,   43,  197,   43,  143,   43,
      197,  142,  141,   83,   43,   43,  138,   43,   43,   44,
       43,   43,   44,   44,   45,   44,  136,   45,   45,  134,

       45,  132,   44,   86,  131,   46,   85,   45,   46,   46,
       74,   46,   72,   44,   86,   86,   71,   86,   46,   87,
       87,   88,   88,   70,   86,   89,   89,   90,   90,   90,
       91,   91,   89,   91,   88,   65,   87,   87,   88,   88,
       91,   60,   89,   89,   58,   90,   90,   92,   92,   53,
       92,   93,   93,   51,   93,   50,   93,   92,   49,   94,
       94,   93,   94,   95,   95,   95,   95,   47,   25,   94,
       24,   22,   18,   95,   94,   16,   94,   96,   96,   15,
       96,   97,   97,   12,   97,   97,   96,   96,   11,   98,
       98,   97,   98,   99,   99,   96,   99,    9,    7,   98,

        0,  100,  100,   99,  100,  101,  101,   99,  101,  102,
      102,  100,  102,  100,    0,  101,  101,  103,  103,  102,
      104,  104,    0,  102,  105,  105,  106,  106,    0,  106,
      104,    0,    0,    0,  103,  103,  106,  104,  104,    0,
        0,  105,  105,  107,  107,    0,  107,  108,  108,    0,
      108,  109,  109,  107,  109,  110,  110,  108,  110,  111,
      111,  109,  111,    0,    0,  110,    0,  112,  112,  111,
      112,  109,    0,  113,  113,  112,  113,  112,    0,  113,
        0,  114,  114,  113,  114,    0,  115,  115,    0,  115,
        0,  114,    0,    0,    0,  114,  115,  115,  116,  116,

      117,  116,    0,  117,  117,  117,  117,    0,  116,  118,
      118,    0,  118,  117,    0,  117,  119,  119,    0,  118,
      120,  120,    0,  120,    0,    0,  118,    0,  121,  121,
      120,  121,    0,  119,  119,    0,  121,    0,  121,  122,
      122,  123,  122,    0,  123,  123,    0,  123,    0,  122,
      150,  150,  124,  122,  123,  124,  124,    0,  124,    0,
        0,  125,  125,    0,  125,  124,    0,  150,  150,  124,
      125,  125,  126,  126,    0,  126,  127,  127,    0,  127,
      128,  128,  126,  128,    0,    0,  127,    0,  127,    0,
      128,  148,  129,  129,  128,  129,    0,  129,  148,  148,

        0,  148,  129,  149,  149,    0,  149,    0,  148,  151,
      151,    0,  151,  149,  152,  152,    0,  152,    0,  151,
        0,    0,  153,    0,  152,  153,  153,  154,  153,    0,
      154,  154,    0,  154,    0,  153,  155,  155,    0,  155,
      154,  156,  156,    0,  155,    0,  155,  157,  157,  160,
      160,  158,  158,  157,  158,  159,  159,  159,  156,  156,
        0,  158,  161,  161,  157,  157,  160,  160,  162,  162,
        0,  163,  163,  159,  159,  165,  165,  164,  164,  161,
      161,  162,  163,  166,  166,  162,  162,    0,  163,  163,
      164,    0,  165,  165,  164,  164,  166,  167,  167,    0,

      166,  166,  168,  168,    0,    0,  169,  169,  167,  169,
        0,    0,  168,    0,  167,  167,  169,    0,    0,  168,
      168,  170,  170,    0,  170,  171,  171,    0,  171,  170,
        0,  170,    0,  172,  172,  171,  172,  173,  173,    0,
      173,  174,  174,  172,  174,  175,  175,  173,  175,  176,
      176,  174,  176,  175,  177,  175,    0,  177,  177,  176,
      177,  178,  178,  179,  179,    0,  179,  177,    0,    0,
      184,  184,  184,  179,  180,  180,  184,  180,  178,  178,
      181,  181,  180,  181,  180,  182,  182,  184,  182,    0,
      181,  183,  183,    0,  183,  182,  185,  185,    0,  185,

      185,  183,  186,  186,    0,  186,  185,  187,  187,  189,
      189,    0,  186,  188,  188,    0,  188,  191,  191,    0,
      186,  190,  190,  188,  187,  187,  189,  189,  190,    0,
      192,  192,    0,    0,  191,  191,  192,  194,  190,  190,
      193,  193,    0,  193,  195,  195,    0,  192,  192,    0,
      193,    0,    0,  194,  194,    0,  194,    0,  194,  202,
      202,  195,  195,  194,  201,  203,  203,  201,  201,  204,
      204,    0,  205,  205,    0,    0,  202,  202,  207,  207,
      208,  208,  203,  203,  201,  201,  204,  204,  205,  205,
      205,  206,  206,    0,    0,  207,  207,  208,  208,    0,

      206,  210,  210,  209,  209,  211,  211,    0,  206,  206,
      209,  212,  212,    0,  213,  213,    0,  213,  210,  210,
      209,  209,  211,  211,  213,    0,  223,  223,  212,  212,
      212,  214,  214,    0,  214,  215,  215,    0,  215,  216,
      216,  214,  216,  223,  223,  215,    0,  217,  217,  216,
      217,    0,  218,  216,    0,  218,  218,  217,  218,  219,
      219,  217,  219,  220,  220,  218,  220,  221,  221,  219,
      221,  222,  222,  220,  222,    0,  219,  221,  224,  224,
        0,  222,  225,  225,  226,  226,  227,  227,    0,  224,
        0,    0,  225,    0,    0,  224,  224,    0,    0,  225,

      225,  226,  226,  227,  227,  228,  228,  228,  229,  229,
      229,  228,    0,  230,  230,    0,  230,  231,  231,  231,
        0,    0,  228,  230,    0,    0,  229,  229,  233,  233,
        0,  233,  234,  234,  231,  234,  235,  235,  233,  235,
      236,  236,  234,  236,  237,  237,  235,  237,  238,  238,
      236,  238,  239,  239,  237,  239,  240,  240,  238,  240,
        0,  237,  239,    0,  242,  247,  240,  242,  242,    0,
      242,  243,  243,    0,  243,  247,  247,  242,  247,  248,
      248,  243,  248,  249,  249,  247,  249,  250,    0,  248,
        0,  251,  251,  249,  251,  252,  252,    0,  252,    0,

      248,  251,    0,  250,  250,  252,  250,    0,  253,  253,
        0,  253,    0,  250,  254,  254,  253,  250,  253,  255,
      255,    0,  255,  256,  256,    0,  256,  257,  257,  255,
      257,  254,  254,  256,  258,  258,    0,  257,  259,  259,
        0,  259,  262,  260,  260,    0,  260,    0,  259,  261,
      261,  258,  258,  260,  263,  263,    0,  263,  262,  262,
        0,  262,  264,  264,  263,    0,  261,  261,  262,  265,
      265,  266,  266,  266,  268,  268,  269,  269,    0,  264,
      264,  271,  271,  272,  272,    0,  265,  265,  266,  273,
      273,  268,  268,  269,  269,    0,  275,  275,  271,  271,

      272,  272,  274,  274,    0,  274,  273,  273,  278,  281,
      281,  281,  274,  275,  275,  278,  278,  279,  279,  279,
      282,  282,    0,  279,  283,  283,    0,  281,  281,  284,
      284,    0,  278,  278,  279,  285,  285,  282,  282,  282,
        0,  283,  283,  286,  286,    0,  284,  284,  287,  287,
        0,  287,  285,  285,  288,  288,    0,  288,  287,    0,
      286,  286,  289,  289,  288,  289,    0,  289,  288,  290,
      290,    0,  289,  291,  291,  292,  292,    0,  293,  293,
        0,  293,    0,    0,  291,    0,  290,  290,  293,    0,
      291,  291,  292,  292,    0,  292,  295,  295,    0,  295,

      296,  296,    0,  296,    0,    0,  295,  297,  297,  297,
      296,  298,  298,  297,  298,  301,  301,    0,  301,  298,
        0,  298,    0,    0,  297,  301,  302,  302,  302,  304,
      304,    0,  304,    0,  304,  305,  305,    0,  305,  304,
        0,  306,  306,  302,  306,  305,  307,  307,    0,  307,
        0,  306,  308,  308,  308,    0,  307,    0,  308,    0,
      309,  309,    0,  309,  310,  310,    0,  310,    0,  308,
      309,  311,  311,  311,  310,    0,    0,  311,  309,  312,
      312,    0,  312,    0,  314,  314,  314,    0,  311,  312,
      313,  313,    0,  313,    0,  313,  316,  316,    0,  316,

      313,  314,  320,  320,    0,  320,  316,  321,  321,    0,
      321,    0,  320,  322,  322,  322,    0,  321,  324,  324,
        0,  324,  325,  325,    0,  325,  330,  330,  324,    0,
      322,  334,  325,  326,  326,  326,  325,  328,  328,  338,
      328,  332,  332,  330,  330,  334,  334,  328,  335,  335,
      326,  337,  337,  338,  338,    0,    0,    0,  332,  332,
      339,    0,  334,  334,  341,  335,  335,  342,  337,  337,
      338,  338,  344,    0,  339,  339,    0,    0,  341,  341,
        0,  342,  342,    0,    0,    0,  344,  344,    0,    0,
        0,  339,  339,    0,    0,  341,  341,    0,  342,  342,

        0,    0,    0,  344,  344,  346,  346,  346,  346,  346,
      347,  347,  347,  347,  347,  348,  348,    0,  348,  348,
      349,  349,  350,  350,  350,  350,  350,  351,  351,  351,
      351,  352,  352,  352,  352,  352,  353,  353,  353,  353,
      353,  354,  354,    0,  354,  354,  356,  356,  356,  356,
      356,  357,  357,  357,  357,  357,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[106] =
    {   0,
0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 
    1, 0, 1, 0, 0, 0,     };

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "src/cmpl/CMPL_Scanner.l"
/***********************************************************************
 *  This code is part of CMPL
 *
 *  Copyright (C) 2007, 2008, 2009, 2010, 2011 Thomas Schleiff - Halle(Saale), 
 *  Germany and Mike Steglich - Technical University of Applied Sciences
 *  Wildau, Germany 
 *
 *  Coliop3 and CMPL are projects of the Technical University of 
 *  Applied Sciences Wildau and the Institute for Operations Research 
 *  and Business Management at the Martin Luther University 
 *  Halle-Wittenberg.
 *  Please visit the project homepage <www.coliop.org>
 * 
 *  CMPL is free software; you can redistribute it and/or modify it 
 *  under the terms of the GNU General Public License as published by 
 *  the Free Software Foundation; either version 3 of the License, or 
 *  (at your option) any later version.
 * 
 *  CMPL is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public 
 *  License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses/>.
 *
 ***********************************************************************/
#line 32 "src/cmpl/CMPL_Scanner.l"
#include "Compiler.hh"
#include "FileIO.hh"


/* By default cmpllex returns int, we use token_type.
Unfortunately yyterminate by default returns 0, which is
not of token_type.  */
#define yyterminate() return token::END

// Scanner verwendet YYSTYPE und YYLTYPE, waehrend Parser yy::CMPL_Parser::semantic_type und yy::CMPL_Parser::location_type verwendet
#define YYSTYPE cmpl::CMPL_Parser::semantic_type
#define YYLTYPE cmpl::CMPL_Parser::location_type

typedef cmpl::CMPL_Parser::token token;
/* 1.1.3 TS: the "incl" state is used for picking up the name of an include file */


/* Definition von Abkuerzungen */
#line 1085 "src/cmpl/_CMPL_Scanner.cc"

#define INITIAL 0
#define incl 1
#define subsym 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int cmpllex_init (yyscan_t* scanner);

int cmpllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cmpllex_destroy (yyscan_t yyscanner );

int cmplget_debug (yyscan_t yyscanner );

void cmplset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE cmplget_extra (yyscan_t yyscanner );

void cmplset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *cmplget_in (yyscan_t yyscanner );

void cmplset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *cmplget_out (yyscan_t yyscanner );

void cmplset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t cmplget_leng (yyscan_t yyscanner );

char *cmplget_text (yyscan_t yyscanner );

int cmplget_lineno (yyscan_t yyscanner );

void cmplset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * cmplget_lval (yyscan_t yyscanner );

void cmplset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *cmplget_lloc (yyscan_t yyscanner );
    
        void cmplset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cmplwrap (yyscan_t yyscanner );
#else
extern int cmplwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cmpllex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int cmpllex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 68 "src/cmpl/CMPL_Scanner.l"


	/* 1.1.3 TS: Behandlung von include (nach der Dokumentation von flex) */
#line 1343 "src/cmpl/_CMPL_Scanner.cc"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)cmplalloc(YY_STATE_BUF_SIZE  ,yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in cmpllex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cmplensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				cmpl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		cmpl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 346 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1557 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 71 "src/cmpl/CMPL_Scanner.l"
BEGIN(incl);		/* include beginnt */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "src/cmpl/CMPL_Scanner.l"
;					/* Whitespace zwischen include und Dateiname überlesen */
	YY_BREAK
case 3:
/* rule 3 can match eol */
#line 74 "src/cmpl/CMPL_Scanner.l"
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 74 "src/cmpl/CMPL_Scanner.l"
{ 					/* Dateiname der einzufügenden Datei */ 
								yyin = PARSE_CONTEXT.open_include_file(yylval);
								cmplpush_buffer_state(cmpl_create_buffer(yyin,YY_BUF_SIZE,yyg ),yyg );
								GLV->akt_src_line = 1;
								BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(incl):
case YY_STATE_EOF(subsym):
#line 79 "src/cmpl/CMPL_Scanner.l"
{ cmplpop_buffer_state(yyg );
								PARSE_CONTEXT.include_pop();
								if ( YY_CURRENT_BUFFER ) { GLV->akt_src_line = yylineno; }
								else { yyterminate(); } }
	YY_BREAK
/* program sections (es muss ":" folgen) */
case 5:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 86 "src/cmpl/CMPL_Scanner.l"
{ return(token::SECT_PARAM); }
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 87 "src/cmpl/CMPL_Scanner.l"
{ return(token::SECT_VAR); }
	YY_BREAK
case 7:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 88 "src/cmpl/CMPL_Scanner.l"
{ return(token::SECT_OBJ); }
	YY_BREAK
case 8:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 89 "src/cmpl/CMPL_Scanner.l"
{ return(token::SECT_CSTR); }
	YY_BREAK
/* funcions and  operators */
case 9:
YY_RULE_SETUP
#line 92 "src/cmpl/CMPL_Scanner.l"
{ return(token::READSTDIN); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 93 "src/cmpl/CMPL_Scanner.l"
{ return(token::READCSV); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 95 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_SQRT; return(token::MATHFUNC);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 96 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_EXP; return(token::MATHFUNC);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 97 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_LOG; return(token::MATHFUNC);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 98 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_LOG10; return(token::MATHFUNC);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 99 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_LOG2; return(token::MATHFUNC);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 100 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_RAND; return(token::MATHFUNC);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 101 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_SIN; return(token::MATHFUNC);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 102 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_COS; return(token::MATHFUNC);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 103 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_TAN; return(token::MATHFUNC);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 104 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_ACOS; return(token::MATHFUNC);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 105 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_ASIN; return(token::MATHFUNC);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 106 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_ATAN; return(token::MATHFUNC);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 107 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_SINH; return(token::MATHFUNC);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 108 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_COSH; return(token::MATHFUNC);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 109 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_TANH; return(token::MATHFUNC);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 110 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_ABS; return(token::MATHFUNC);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 111 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_CEIL; return(token::MATHFUNC);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 112 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_FLOOR; return(token::MATHFUNC);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 113 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_ROUND; return(token::MATHFUNC);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 114 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=F_SEED; return(token::MATHFUNC);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 116 "src/cmpl/CMPL_Scanner.l"
{ return(token::FCT_MIN); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 117 "src/cmpl/CMPL_Scanner.l"
{ return(token::FCT_MAX); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 118 "src/cmpl/CMPL_Scanner.l"
{ return(token::DIM); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 119 "src/cmpl/CMPL_Scanner.l"
{ return(token::DEF); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 120 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::DIV); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 121 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::MOD); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 122 "src/cmpl/CMPL_Scanner.l"
{ return(token::SUM); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 123 "src/cmpl/CMPL_Scanner.l"
{ return(token::LEN); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 124 "src/cmpl/CMPL_Scanner.l"
{ return(token::FORMAT); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 125 "src/cmpl/CMPL_Scanner.l"
{ return(token::TYPE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 126 "src/cmpl/CMPL_Scanner.l"
{ return(token::DEFSET); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 127 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::IN_SET); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 129 "src/cmpl/CMPL_Scanner.l"
{ return(token::PROBLEM_SOLVE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 130 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=CMPL_PROBLEM_STAT; return(token::PROBLEM_FUNC); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 131 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=CMPL_PROBLEM_WAIT; return(token::PROBLEM_FUNC); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 132 "src/cmpl/CMPL_Scanner.l"
{ yylval->i=CMPL_PROBLEM_KILL; return(token::PROBLEM_FUNC); }
	YY_BREAK
/* Variablentypen und Konstantentypen (in getypten Zuweisungen folgt ":=", deshalb das auch vorsehen, solange es die Regel "{SYM_NAME}/[[:space:]]*:=" noch gibt) */
case 47:
YY_RULE_SETUP
#line 135 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_REAL); }
	YY_BREAK
case 48:
/* rule 48 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 136 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_REAL); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 137 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_INT); }
	YY_BREAK
case 50:
/* rule 50 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 138 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_INT); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 139 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_BINARY); }
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 140 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_BINARY); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 141 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_STRING); }
	YY_BREAK
case 54:
/* rule 54 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 142 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_STRING); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 143 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_SET); }
	YY_BREAK
case 56:
/* rule 56 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 144 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_SET); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 145 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_PROBLEM); }
	YY_BREAK
case 58:
/* rule 58 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 146 "src/cmpl/CMPL_Scanner.l"
{ return(token::TD_PROBLEM); }
	YY_BREAK
/* Error-Anweisung */
case 59:
YY_RULE_SETUP
#line 149 "src/cmpl/CMPL_Scanner.l"
{ return(token::ERRMSG); }
	YY_BREAK
/* 1.1.3 stegger user defined message */
case 60:
YY_RULE_SETUP
#line 152 "src/cmpl/CMPL_Scanner.l"
{ return(token::USRMSG); }
	YY_BREAK
/* Schleifenkontrolle */
case 61:
YY_RULE_SETUP
#line 155 "src/cmpl/CMPL_Scanner.l"
{ return(token::DEFAULT); }
	YY_BREAK
/* while					{ return(token::WHILE); } */	/* Nur hier als Token auskommentiert, ansonsten weiter verwendbar */
case 62:
YY_RULE_SETUP
#line 157 "src/cmpl/CMPL_Scanner.l"
{ return(token::REF); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 158 "src/cmpl/CMPL_Scanner.l"
{ return(token::BREAK); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 159 "src/cmpl/CMPL_Scanner.l"
{ return(token::CONTINUE); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 160 "src/cmpl/CMPL_Scanner.l"
{ return(token::REPEAT); }
	YY_BREAK
/* Zuweisung/Iteration */
case 66:
YY_RULE_SETUP
#line 163 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::ASSIGN); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 164 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::ASSIGN_ITER); }
	YY_BREAK
/* Zahlenkonstante */
case 68:
YY_RULE_SETUP
#line 167 "src/cmpl/CMPL_Scanner.l"
{ return(PARSE_CONTEXT.test_number(yylval)); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 168 "src/cmpl/CMPL_Scanner.l"
{ sscanf(yytext, "%lf", &(yylval->d));
							  return(token::DOUBLE_NUMBER); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 170 "src/cmpl/CMPL_Scanner.l"
{ return(token::NULL_VAL); }
	YY_BREAK
/* Namen */
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 173 "src/cmpl/CMPL_Scanner.l"
{ /* Symbol mit Zuweisung, fuer Zuweisung von temporaeren Konstanten in allen Abschnitten benoetigt */
							  cmpl::CMPL_Parser::token_type t = PARSE_CONTEXT.test_symbol(yylval, false);
							  return (t == token::DEFS_TMP ? token::DEFS_TMP_ASSIGN : t); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 176 "src/cmpl/CMPL_Scanner.l"
{ return(PARSE_CONTEXT.test_symbol(yylval, false)); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 177 "src/cmpl/CMPL_Scanner.l"
{ /*strncpy(GLV->last_str, yytext, COMP_STR_LEN);
							  GLV->last_str[COMP_STR_LEN] = '\0';
							  return(token::LINENAME_SYMBOL);*/
							  return(PARSE_CONTEXT.test_symbol(yylval, true)); }
	YY_BREAK
/* Indexbereich bzw. Angabe fuer Sets */
case 74:
YY_RULE_SETUP
#line 183 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::POINTS); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 184 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::SET_ALL_NUM); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 185 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::SET_ALL_STR); }
	YY_BREAK
/* Angabe Optimierungsrichtung */
case 77:
YY_RULE_SETUP
#line 188 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::OBJ_TO); }
	YY_BREAK
/* Vergleichsoperatoren */
case 78:
YY_RULE_SETUP
#line 191 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(cmpl::CMPL_Parser::token_type('=')); } /* auch Zuweisung (veraltet) */
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 192 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::VERG_EQ2); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 193 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::VERG_NE); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 194 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::VERG_NE2); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 195 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::VERG_LT); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 196 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::VERG_GT); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 197 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::VERG_LE); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 198 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::VERG_GE); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 199 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::IN_SET); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 201 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::LOG_AND); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 202 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(token::LOG_OR); }
	YY_BREAK
/* Subsymbols */
case 89:
YY_RULE_SETUP
#line 205 "src/cmpl/CMPL_Scanner.l"
{ BEGIN(subsym); return(token::SUBSYM_OP); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 206 "src/cmpl/CMPL_Scanner.l"
{ BEGIN(INITIAL); return PARSE_CONTEXT.test_subsymbol(yylval); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 207 "src/cmpl/CMPL_Scanner.l"
;
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 208 "src/cmpl/CMPL_Scanner.l"
;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 209 "src/cmpl/CMPL_Scanner.l"
;
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 210 "src/cmpl/CMPL_Scanner.l"
{ COMP(SRC_LINE, 1);
							  GLV->akt_src_line = yylineno;
							  COMP_INT(GLV->akt_src_line); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 213 "src/cmpl/CMPL_Scanner.l"
{ BEGIN(INITIAL); return(cmpl::CMPL_Parser::token_type(*yytext)); /* wrong token, for error handling only */ }
	YY_BREAK
/* String */
case 96:
/* rule 96 can match eol */
#line 217 "src/cmpl/CMPL_Scanner.l"
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 217 "src/cmpl/CMPL_Scanner.l"
{ /* String als TP_ISTR einfuegen und Nummer an Parser */
                              cmpl::val_str val;
							  strncpy(GLV->last_str, yytext+1, COMP_STR_LEN); 
							  GLV->last_str[COMP_STR_LEN] = '\0';
							  GLV->last_str[strlen(GLV->last_str)-1] = '\0';
							  GLV->string_to_istr(&val, GLV->last_str, true);
							  yylval->i = val.v.i;
							  return(token::STRING); }
	YY_BREAK
/* arithmetische Klammer oder Beginn Wertliste bei Vektordefinition */
case 98:
YY_RULE_SETUP
#line 227 "src/cmpl/CMPL_Scanner.l"
{ /*if(GLV->is_scann_const_vekt &&
							GLV->index_info.i_akt_ind < GLV->index_info.i_free_ind) {
								GLV->index_info.i_akt_ind++;
								return(token::VEKT_BEG); }	// Beginn Wertliste
							else */ return(cmpl::CMPL_Parser::token_type('('));	}	/* arithmetische Klammer */
	YY_BREAK
/* Kommentar */
case 99:
YY_RULE_SETUP
#line 234 "src/cmpl/CMPL_Scanner.l"
;
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 235 "src/cmpl/CMPL_Scanner.l"
;
	YY_BREAK
/* Whitespaces */
case 101:
YY_RULE_SETUP
#line 238 "src/cmpl/CMPL_Scanner.l"
;
	YY_BREAK
/* neue Zeile, Zeilennummer in den Zwischencode */
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 240 "src/cmpl/CMPL_Scanner.l"
{ COMP(SRC_LINE, 1);
						  GLV->akt_src_line = yylineno;		/* 1.1.3 TS: akt_src_line nicht mehr selber zählen, sondern aus yylineno übernehmen */
						  COMP_INT(GLV->akt_src_line); }
	YY_BREAK
/* uebrige Zeichen (Operatoren, Klammern, Semikolon, Doppelpunkt, Komma) */
case 103:
YY_RULE_SETUP
#line 245 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 1; return(cmpl::CMPL_Parser::token_type(*yytext)); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 246 "src/cmpl/CMPL_Scanner.l"
{ GLV->exp_transp = 0; return(cmpl::CMPL_Parser::token_type(*yytext)); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 249 "src/cmpl/CMPL_Scanner.l"
ECHO;
	YY_BREAK
#line 2090 "src/cmpl/_CMPL_Scanner.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * cmpllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( cmplwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of cmpllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cmplrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cmplrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 346 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 346 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 345);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cmplrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cmplwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cmplrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        cmplensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            cmpl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	cmpl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	cmpl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void cmpl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cmplpop_buffer_state();
	 *		cmplpush_buffer_state(new_buffer);
     */
	cmplensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cmpl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (cmplwrap()) processing, but the only time this flag
	 * is looked at is after cmplwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void cmpl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cmpl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cmplalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cmpl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cmplalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cmpl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	cmpl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cmpl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void cmpl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cmplfree((void *) b->yy_ch_buf ,yyscanner );

	cmplfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cmplrestart() or at EOF.
 */
    static void cmpl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	cmpl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cmpl_init_buffer was _probably_
     * called from cmplrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void cmpl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cmpl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void cmplpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	cmplensure_buffer_stack(yyscanner);

	/* This block is copied from cmpl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cmpl_switch_to_buffer. */
	cmpl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void cmplpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	cmpl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		cmpl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cmplensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)cmplalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in cmplensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)cmplrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in cmplensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cmpl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cmplalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cmpl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cmpl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cmpllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cmpl_scan_bytes() instead.
 */
YY_BUFFER_STATE cmpl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return cmpl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to cmpllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cmpl_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cmplalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cmpl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cmpl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cmpl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE cmplget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int cmplget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int cmplget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *cmplget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *cmplget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t cmplget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *cmplget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void cmplset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void cmplset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "cmplset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void cmplset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "cmplset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see cmpl_switch_to_buffer
 */
void cmplset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void cmplset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int cmplget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void cmplset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * cmplget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void cmplset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *cmplget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void cmplset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* cmpllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int cmpllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) cmplalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* cmpllex_init_extra has the same functionality as cmpllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to cmplalloc in
 * the yyextra field.
 */

int cmpllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    cmplset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) cmplalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    cmplset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cmpllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cmpllex_init()
     */
    return 0;
}

/* cmpllex_destroy is for both reentrant and non-reentrant scanners. */
int cmpllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cmpl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cmplpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	cmplfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        cmplfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    cmplfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cmpllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    cmplfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cmplalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *cmplrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cmplfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see cmplrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 249 "src/cmpl/CMPL_Scanner.l"




namespace cmpl
{
	/* Startet den Scanner */
	void Compiler::scan_begin()
	{
		io_type_str *ios;

		/* Scanner bereitstellen */
		cmpllex_init(&scanner);

		/* Datei fuer Scanner setzen */
		ios = &(glvar->aufruf_p->input);

		/* 1.1.3: Initialisierung fuer include */
		include_init();

		/* 1.1.3: Eingabedatei als ersten Eintrag fuer include-Stack setzen */
		if (ios->filename == (char *)0)
		{
#ifdef CHDIR
			glvar->incl_dir_name[glvar->incl_stack_ptr] = glvar->dir_start_name;
#endif
			glvar->incl_file_name[glvar->incl_stack_ptr] = (char *)0;
			glvar->incl_stack_ptr++;

			include_set_filename((char *)0);
		}
		else
		{
			include_push(ios->filename);
		}
		
		/* Erstmal nur Datei als Eingabe moeglich */
		if (ios->file_fp != (FILE *)0)
			cmplrestart (ios->file_fp, scanner);
	}

	/* Beendet den Scanner */
	void Compiler::scan_end()
	{
#ifdef CHDIR
		/* 1.1.3: Ausgangs-Directory wieder setzen */
		chdir(glvar->dir_start_name.c_str());
#endif

		/* Scanner wieder freigeben */
		cmpllex_destroy(scanner);
		scanner = (void *)0;
	}

	/* Test, ob ganze Zahl im int-Wertebereich liegt */
	CMPL_Parser::token_type Compiler::test_number(YYSTYPE *yyvalp)
	{
		char str[20];
		struct yyguts_t * yyg = (struct yyguts_t*)scanner;

		yyvalp->i = atoi(yytext);
		sprintf(str, "%d", yyvalp->i);
		if(strncmp(yytext, str, 20)==0) return(token::INT_NUMBER);
		sscanf(yytext, "%lf", &(yyvalp->d));
		return(token::DOUBLE_NUMBER);	/* wenn ganze Zahl zu gross fuer int, dann double */
	}


	/* Test, ob Transponierkennzeichen oder welche Symbolart */
	CMPL_Parser::token_type Compiler::test_symbol(YYSTYPE *yyvalp, bool linename)
	{ 
		struct yyguts_t * yyg = (struct yyguts_t*)scanner;

		// TODO: Transpose besser ueber scanner state
		if(glvar->exp_transp && strcmp(yytext, "T")==0) return(token::TRANSPOSE);

		// Symbol suchen und noetigenfalls Name einfuegen
		bool found; 
		int sym = glvar->symbol_main_names.search_insert(glvar, yytext, true, &found);
		PROTO_OUT_4("\n    searched for symbol %s, returns #%d (found:%d)", yytext, sym, (int)found);

		if (!found)
		{
			// Symbolinfo einfuegen, erstmal ohne Typ und ungueltig
			glvar->symbol_main_table.insert(glvar, glvar->symbol_main_names.elem(sym), sym, sym);
		}
		symbol_comp_str *symp = glvar->symbol_main_table.elem(sym);

		yyvalp->exp.set_sym(&(glvar->symbol_main_table), sym);

		if (linename)
		{
			// TODO: Spezialsymbole fuer Zeilennamenindex behandeln

			// Symbol, das nur Zeilenname sein kann, bekommt jetzt schon passenden Symboltyp, damit gleich richtiges Token
			symp->symtp = PTR_TP_LINENAME;
		}
		else
		{
			// Wenn lokales Symbol außerhalb des Gültigkeitsbereichs, dann hier als undefiniert zurück
			if (!(symp->valid))
				return (token::SYMBOL_UNDEF);
		}

		switch (symp->symtp)
		{
			case PTR_TP_CONST:
				//TODO: DEFS_TMP entfaellt?
				return (symp->local ? token::DEFS_TMP : token::SYMBOL_VALUE);
			case PTR_TP_VAR:
				return (token::SYMBOL_VAR);
			case PTR_TP_LINENAME:
				return (token::SYMBOL_LINENAME);
			default:
				return (token::SYMBOL_UNDEF);
		}


		/*
		int n;
		struct yyguts_t * yyg = (struct yyguts_t*)scanner;

		if(glvar->exp_transp && strcmp(yytext, "T")==0) return(token::TRANSPOSE);
		strncpy(glvar->last_str, yytext, SYM_NAME_LEN-1);
		glvar->last_str[SYM_NAME_LEN-1] = '\0';

		if((yyvalp->i = search_symbol(glvar->last_str, &n)) == -1) 
		{
			// Vorlauefig hier Symbol noch nicht einfügen, weil fuer temporaeres Symbol oder Zeilenname falsch
			yyvalp->exp.set((void*)0, TPP_EMPTY, 0, true, 0, 0, 0);
			return(token::SYMBOL_UNDEF);
		}
		else if(yyvalp->i < 0)
		{
			return(token::DEFS_TMP);		// Laufkonstante
		}
		else
		{
			// Erstmal yyvalp->exp.sym_p fuer die Symbolnummer verwenden
			// Vorlauefig wird hier dim_out = 0 verwendet, damit Symbole ohne folgende Indexangabe die richtige Dimension haben
			yyvalp->exp.set((void*)n, glvar->symbol_table[n].tp_sym, 0, true, 0, 0, 0);

			PROTO_OUT_2("  tp_sym=%d", (int)glvar->symbol_table[n].tp_sym);
			switch(glvar->symbol_table[n].tp_sym)
			{
				case TPK_VAR:	// Variable
					return(token::SYMBOL_VAR);
				case TPK_VALUE:	// Einfacher Wert
				case TPK_SET:	// Set
					return(token::SYMBOL_VALUE);

				default:		// Fehler wegen Nutzung Symbol, das noch in Definition ist
					SPRINT_ERR_2(ERROR_SYMBOL_INDEF, glvar->last_str);
					output_error_parse(ERROR_TYPE_COMP, ERROR_LVL_NORMAL, glvar->errbuf);
					return(token::SYMBOL_VALUE);
			}
		}
		*/
	}

	/* Test Subsymbol */
	CMPL_Parser::token_type Compiler::test_subsymbol(YYSTYPE *yyvalp)
	{ 
		struct yyguts_t * yyg = (struct yyguts_t*)scanner;

		// Subsymbol suchen und noetigenfalls Name einfuegen
		bool found; 
		int sym = glvar->symbol_sub_names.search_insert(glvar, yytext, true, &found);
		PROTO_OUT_4("\n    searched for subsymbol %s, returns #%d (found:%d)", yytext, sym, (int)found);

		yyvalp->i = sym;
		return (found ? token::SUBSYMBOL_VALUE : token::SUBSYMBOL_UNDEF);
	}


	FILE* Compiler::open_include_file(YYSTYPE *yyvalp)
	{
		FILE *incl_fp;

		/* Dateiname bestimmen */
		struct yyguts_t * yyg = (struct yyguts_t*)scanner;
		strncpy(glvar->last_str, yytext+1, COMP_STR_LEN);
		glvar->last_str[COMP_STR_LEN] = '\0';
		glvar->last_str[strlen(glvar->last_str)-1] = '\0';

	#ifdef CHDIR
		/* Pfad-Separator tauschen, damit in CMPL unabhaengig vom Betriebssystem immer '/' verwendet werden kann */
		if (glvar->dir_sep_char != '/')
		{
			char *p;
			for (p = glvar->last_str; *p != '\0'; p++)
			{
				if (*p == '/')
					*p = glvar->dir_sep_char;
			}
		}
	#endif

		PROTO_OUT_2("\ninclude '%s'", glvar->last_str);

		/* Datei oeffnen */
		incl_fp = fopen( glvar->last_str, "r" );
		if (! incl_fp)
		{
			/* File not found */
			SPRINT_ERR_2(ERROR_FILE_INPUT_INCL, glvar->last_str);
			output_error_parse(ERROR_TYPE_IO, ERROR_LVL_FATAL, glvar->errbuf);
		}

		/* Info auf den include-Stack */
		include_push(glvar->last_str);

		return incl_fp;
	}
}

